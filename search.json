[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Workshop on Data Simulation & Power Analysis",
    "section": "",
    "text": "Welcome! This website will form the basis of the 2024 ManyBabies workshop on Data Simulation & Power Analysis. Before we start, I would like to emphasise that this workshop has been a collaborative effort and has had input from many different people.\nFirst of all, the approach and code were born out of a series of meetings with researchers on the data analysis team in the ManyBabies5 project (https://manybabies.org/MB5/). This was a fundamentally exploratory project, the exploration being guided only by curiosity and a what-if mindset.\nFor example, how do predictors with two or three levels impact the power to detect an effect on infant looking times? How does variability in individual labs come to affect generalisability and statistical power? What is the optimal balance between various pracical constraints (e.g., an upper bound on the number of stimulus items that infants can attend to) and statistical inference (e.g., how much of a decrease in power are we willing to accept based on the above constraints)? Can these results inform the experimental design in some way and allow us to improve chances of replicability?\nThis workshop assumes a little literacy in R and linear mixed-effects models, but I have attempted to make these subjects as accessible as possible, even without knowledge of these topics. If you are interested in gaining hands-on pracical experience with the code, then feel free to follow this guide on installing and using R: https://rstudio-education.github.io/hopr/starting.html.\nIf you do have R and RStudio set up on your laptop, feel free to download the following .Rmd files with the code, so that you can get a better idea of what each code snippet does and can manipulate them according to your own needs.\nLINK TO EXERCISE SHEET, PART 1 LINK TO EXERCISE SHEET, PART 2\nI hope that this will be fun experience and useful exploration of data simulation, power analysis, statistical modelling and programming, and if you have any questions, big or small, feel free to contact me on chris[dot]mm[dot]cox@gmail.com.\nHere is the code to generate the following website: https://4ccoxau.github.io/PowerAnalysisWorkshopManyBabies/",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "content/rmarkdown.html",
    "href": "content/rmarkdown.html",
    "title": "R Markdown",
    "section": "",
    "text": "You can include R Markdown files in your project."
  },
  {
    "objectID": "content/rmarkdown.html#r-markdown",
    "href": "content/rmarkdown.html#r-markdown",
    "title": "R Markdown",
    "section": "1 R Markdown",
    "text": "1 R Markdown\nThis is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see http://rmarkdown.rstudio.com.\nWhen you click the Knit button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:\n\nsummary(cars)\n\n     speed           dist       \n Min.   : 4.0   Min.   :  2.00  \n 1st Qu.:12.0   1st Qu.: 26.00  \n Median :15.0   Median : 36.00  \n Mean   :15.4   Mean   : 42.98  \n 3rd Qu.:19.0   3rd Qu.: 56.00  \n Max.   :25.0   Max.   :120.00"
  },
  {
    "objectID": "content/rmarkdown.html#including-plots",
    "href": "content/rmarkdown.html#including-plots",
    "title": "R Markdown",
    "section": "2 Including Plots",
    "text": "2 Including Plots\nYou can also embed plots, for example:\n\n\n\n\n\n\n\n\n\nNote that the echo = FALSE parameter was added to the code chunk to prevent printing of the R code that generated the plot."
  },
  {
    "objectID": "content/ExerciseDataSimulation.html",
    "href": "content/ExerciseDataSimulation.html",
    "title": "Part I, Data Simulation",
    "section": "",
    "text": "In this first task, we will deal with a domain that should be familiar to many developmental science researchers: infant looking times to\nLet’s take inspiration from ManyBabies1 (https://doi.org/10.1177/2515245919900809) and think about how we would simulate data for a new experimmental study on the IDS preference effect. In this study, infant participants are exposed to recordings of adult-directed speech (ADS) and infant-directed speech (IDS), and we use infants’ looking times as the primary dependent variable. The key question is whether there are any behavioural differences according to the set of stimuli within each participant. To gain fammiliarity with the simulation process in an intuitive way, we will simulate data on the scale of looking times (i.e., 0-20,000ms). In later sections, we will extend the process to simulate data on the scale of effect sizes.\nTo give an overview of this first simulation task, we will simulate data with crossed random factors of subjects and stimuli, fit a model to the simulated data, and then see whether the resulting sample estimates are similar to the population values we specified when simulating the data.",
    "crumbs": [
      "Part I, Data Simulation"
    ]
  },
  {
    "objectID": "content/ExerciseDataSimulation.html#a-description-of-the-example-and-aim-of-the-simulation",
    "href": "content/ExerciseDataSimulation.html#a-description-of-the-example-and-aim-of-the-simulation",
    "title": "Part I, Data Simulation",
    "section": "",
    "text": "In this first task, we will deal with a domain that should be familiar to many developmental science researchers: infant looking times to\nLet’s take inspiration from ManyBabies1 (https://doi.org/10.1177/2515245919900809) and think about how we would simulate data for a new experimmental study on the IDS preference effect. In this study, infant participants are exposed to recordings of adult-directed speech (ADS) and infant-directed speech (IDS), and we use infants’ looking times as the primary dependent variable. The key question is whether there are any behavioural differences according to the set of stimuli within each participant. To gain fammiliarity with the simulation process in an intuitive way, we will simulate data on the scale of looking times (i.e., 0-20,000ms). In later sections, we will extend the process to simulate data on the scale of effect sizes.\nTo give an overview of this first simulation task, we will simulate data with crossed random factors of subjects and stimuli, fit a model to the simulated data, and then see whether the resulting sample estimates are similar to the population values we specified when simulating the data.",
    "crumbs": [
      "Part I, Data Simulation"
    ]
  },
  {
    "objectID": "content/ExerciseDataSimulation.html#setting-the-experimental-parameters",
    "href": "content/ExerciseDataSimulation.html#setting-the-experimental-parameters",
    "title": "Part I, Data Simulation",
    "section": "2 Setting the Experimental Parameters?",
    "text": "2 Setting the Experimental Parameters?\nBefore we can start to simulate data, we need to be very clear about the study design. This clarity is important because we need to define the parameters that govern the process we assume can give rise to the data. If we are building on ManyBabies1, then we are dealing with a within-subjects, between-items study; that is, each and every subject receives both ADS and IDS stimuli (within-subject), but each stimulus is either ADS or IDS (between-items).\nBecause infants are not the most patient of participants, perhaps a realistic study design would allow researchers to expose infants to 8 recordings of ADS and 8 recordings of IDS. And let’s say that a realistic sample size our laboratory would be around 25 participants. This implies a total of 400 obsevations in this study (i.e., 8 + 8 recording stimuli for each of the 25 children). Let’s set these experimental parameters now already\n\n# set number of subjects and items\nn_subj     &lt;- 25 # number of subjects\nn_ADS  &lt;-  8 # number of ADS stimuli\nn_IDS &lt;-  8 # number of IDS stimuli",
    "crumbs": [
      "Part I, Data Simulation"
    ]
  },
  {
    "objectID": "content/ExerciseDataSimulation.html#data-generating-parameters",
    "href": "content/ExerciseDataSimulation.html#data-generating-parameters",
    "title": "Part I, Data Simulation",
    "section": "3 Data Generating Parameters",
    "text": "3 Data Generating Parameters\nNow that we have an overview of the experimental design, we can start to consider a reasonable statistical model of the data. In the following sections, we will build up the parameters for a mixed-effects statistical model of the following type, as described in the lecture:\nLooking Time = β₀ + β₁ * SpeechStyle + u₀ⱼ^{(item)} + u₀ᵢ^{(subj)} + (u₁ᵢ^{(subj)} * SpeechStyle) + ε\nAccording to this formula, the looking time for subject, s, on item, i, is decomposed into linear combination of fixed effects (i.e., the population grand mean, β₀, and the effect of SpeechStyle, β₁) and a variety of random effects, such as a by-subject random intercept, u₀ᵢ^{(subj)}, a by-item random intercept u₀ⱼ^{(item)}, a by-subject random slope, (u₁ᵢ^{(subj)} * SpeechStyle), and a trial-level residual error, ε.\nThis formula paves a clear way forward for our data simulation. In the next section, we will build up a statistical model step by step, defining variables in the code as we go along that reflect our choices for parameters.",
    "crumbs": [
      "Part I, Data Simulation"
    ]
  },
  {
    "objectID": "content/ExerciseDataSimulation.html#choosing-values-for-fixed-effect-parameters",
    "href": "content/ExerciseDataSimulation.html#choosing-values-for-fixed-effect-parameters",
    "title": "Part I, Data Simulation",
    "section": "4 Choosing Values for Fixed Effect Parameters",
    "text": "4 Choosing Values for Fixed Effect Parameters\nLet’s start by setting the fixed-effect parameter of SpeechStyle (β₀ + β₁*SpeechStyle). How should we set these parameters? First of all, we can be guided by what we know about looking time distributions in infant experiments. For example, we could imagine average infant looking times to be around 7 seconds (i.e., 7000ms), and from ManyBabies1, we know that infants exhibit around X seconds (i.e., 2000ms) longer looking times to IDS stimuli than to ADS stimuli. Let’s go ahead and code these values explicitly as parameter values in our simulation.\n\n# set fixed effect parameters\nmean_intercept &lt;- 7000  # intercept; i.e., the grand mean, β₀\nmean_slope &lt;- 2000  # slope; i.e, effect of IDS, β₁\n\nWhen we’re modelling data from experiments involving individuals (like infants in this case), it’s essential to account for the fact that each individual may have a unique baseline reaction to the stimuli, which we can’t anticipate or control for entirely. Similarly, the effect of the stimuli itself might vary across different instances of the stimulus. In other words, we expect variability both in how subjects react and in the impact of each stimulus. To address this, we introduce random intercept values for subjects and items. This means we allow for each subject and each stimulus item to have its own intercept value, capturing their individual baseline reactions and effects. To quantify the variability around these values, we introduce the standard deviation of the random intercepts, reflecting the range of differences we might observe among subjects’ reactions and the effects of different stimulus items. Let’s code this as standard deviation of by-subject random intercept and by-item random intercept sd.",
    "crumbs": [
      "Part I, Data Simulation"
    ]
  },
  {
    "objectID": "content/ExerciseDataSimulation.html#choosing-values-for-varying-slope-parameters",
    "href": "content/ExerciseDataSimulation.html#choosing-values-for-varying-slope-parameters",
    "title": "Part I, Data Simulation",
    "section": "5 Choosing Values for Varying Slope Parameters",
    "text": "5 Choosing Values for Varying Slope Parameters\n\n# set random effect parameters\nsubject_varyingintercept &lt;- 2000  # by-subject random intercept sd\nitem_varyingintercept &lt;- 1000  # by-item random intercept sd\n\nIn modeling the effect of IDS stimuli on infant looking times, it’s also important to acknowledge that this effect may vary across different infants. Some infants might be more responsive to IDS stimuli than others, leading to differences in their looking times. Therefore, we need to introduce subject-specific variability to account for how the effect of IDS varies among infants. In statistical modeling, when we include random slopes, we’re essentially allowing the effect of certain variables to vary not only across different individuals (random intercepts) but also across different levels of another variable (random slopes).\nWhen we introduce random slopes, we need to consider potential correlations between these varying slopes and the varying intercepts. This is because if there’s a correlation between the way individuals (infants, in this case) respond to the IDS stimuli (reflected in the random slopes) and their baseline behaviors (reflected in the random intercepts), it can affect our model’s predictions. For instance, if infants who naturally have longer attention spans (reflected in higher random intercepts) also tend to show stronger responses to IDS stimuli (reflected in steeper random slopes), ignoring this correlation might lead to biased estimates or inaccurate predictions. Including a correlation matrix allows us to explicitly account for these potential correlations, ensuring that our model accurately captures the relationships between different sources of variability in the data and produces more reliable results. To capture these patterns, we include a correlation matrix, specifying a weak correlation between the varying intercepts and varying slopes of infant participants. Lastly, we incorporate a residual error term to account for any unexplained sources of variability in the model. This helps ensure that our model accurately captures the complexities of infants’ responses to different stimuli while also acknowledging inherent variations and correlations within the data.\n\n# set more random effect and error parameters\nsubject_varyingslope &lt;- 1000  # by-subject random slope sd\nrho &lt;- 0.2  # correlation between intercept and slope\nsigma &lt;- 500  # residual (error) sd",
    "crumbs": [
      "Part I, Data Simulation"
    ]
  },
  {
    "objectID": "content/ExerciseDataSimulation.html#simulate-the-sampling-of-stimulus-items",
    "href": "content/ExerciseDataSimulation.html#simulate-the-sampling-of-stimulus-items",
    "title": "Part I, Data Simulation",
    "section": "6 Simulate the sampling of stimulus items",
    "text": "6 Simulate the sampling of stimulus items\nNow it’s time to create a dataset that lists, for each stimulus item, the speech style it is in and its varying properties on infants’ looking times. This captures the intuition that we would expect different speech recordings to exhibit variation in infants’ average looking times. Here, we model items only with varying intercepts. To set the parameter for varying item intercept, we are going to specify the standard deviation that we expect items to exhibit in the parameter, item_varyingintercept, in the below code. That is, we sample values from a normal distribution using the rnorm() function, with a meaan of 0 and standard deviation of item_varyingintercept. For the varying item variable, we also need to assign a unique identifer to each of the 16 speech stimuli and designate whether the stimuli are ADS or IDS, with the first 8 being ADS and the next 8 being IDS. We are going to use the faux package to carry this out. Lastly, we will carry out contrast coding, and we will later multiply this effect-coded factor by the fixed effect of category to simulate data where the ADS stimuli on average generate looking times of -500 ms different from the grand mean, while the IDS stimuli are on average 1000 ms different from the grand mean.\n\n# simulate a sample of items\n# total number of items = n_ADS + n_IDS\nitems &lt;- data.frame(\n  #item_id = seq_len(n_ADS + n_IDS),\n  Register = rep(c(\"IDS\", \"ADS\"), c(n_ADS, n_IDS)),\n  O_0i = rnorm(n = n_ADS + n_IDS, mean = 0, sd = item_varyingintercept)\n) %&gt;% \n  mutate(item_id = faux::make_id(nrow(.), \"I\")) %&gt;%\n  mutate(SpeechStyle = recode(Register, \"ADS\" = -0.5, \"IDS\" = +0.5)) #introduce a numeric predictor to represent what category each stimulus item, we set ADS to be -0.5 and IDS to be +0.5. This is what is known as contrast coding.\n\nTo get to better grips with the simuation process, let’s the data visualise and take a look at what we have produced:\n\nglimpse(items)\n\nRows: 16\nColumns: 4\n$ Register    &lt;chr&gt; \"IDS\", \"IDS\", \"IDS\", \"IDS\", \"IDS\", \"IDS\", \"IDS\", \"IDS\", \"A…\n$ O_0i        &lt;dbl&gt; -1207.06575, 277.42924, 1084.44118, -2345.69770, 429.12469…\n$ item_id     &lt;chr&gt; \"I01\", \"I02\", \"I03\", \"I04\", \"I05\", \"I06\", \"I07\", \"I08\", \"I…\n$ SpeechStyle &lt;dbl&gt; 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, -0.5, -0.5, -0.5, …\n\nggplot(items, aes(1, O_0i, fill = Register, color = Register)) +\n    geom_rain(alpha = 0.8, boxplot.args = list(color = \"black\",\n        outlier.shape = NA)) + ggtitle(\"Varying Intercept Terms for Stimulus Item\") +\n    ylab(\"SD of Item Intercept (ms)\") + facet_wrap(~Register) +\n    scale_fill_brewer(palette = \"Dark2\") + scale_color_brewer(palette = \"Dark2\") +\n    plot_theme + theme(axis.title.x = element_blank(), axis.text.x = element_blank(),\n    axis.ticks.x = element_blank())",
    "crumbs": [
      "Part I, Data Simulation"
    ]
  },
  {
    "objectID": "content/ExerciseDataSimulation.html#simulate-the-sampling-of-subjects",
    "href": "content/ExerciseDataSimulation.html#simulate-the-sampling-of-subjects",
    "title": "Part I, Data Simulation",
    "section": "7 Simulate the sampling of subjects",
    "text": "7 Simulate the sampling of subjects\nNow, we will simulate the sampling of individual subjects to create a table that lists each subject along with their two correlated varying effects, namely intercepts and slopes. This process is slightly more complex than before because we cannot simply sample the intercept values (𝑇0𝑠) independently from the slope values (𝑇1𝑠) using rnorm(). Instead, we need to sample pairs of ⟨𝑇0𝑠,𝑇1𝑠⟩ values for each subject from a bivariate normal distribution. We will use the rnorm_multi() function from the faux package (DeBruine 2020) to carry this out. This function generates a table of simulated values from a multivariate normal distribution, allowing us to specify the means (mu) and standard deviations (sd) for each variable, along with the correlations (r), which can be a single value applied to all pairs, a correlation matrix, or a vector of values representing the upper right triangle of the correlation matrix.\n\n# simulate a sample of subjects\n# sample from a multivariate random distribution \nsubjects &lt;- faux::rnorm_multi(\n  n = n_subj, \n  mu = 0, # means for random effects are always 0\n  sd = c(subject_varyingintercept, subject_varyingslope), # note that we set the SDs further up in the code when specifying varying intercepts and sloeps.\n  r = rho, # set correlation, see ?faux::rnorm_multi\n  varnames = c(\"T_0s\", \"T_1s\")\n) %&gt;%\n  mutate(subj_id = faux::make_id(nrow(.), \"S\")) # add subject ids that correspond to the number of rows simulated.\n\nAgain, let’s visualise this process, so that we are sure what is going on:\n\nglimpse(subjects)\n\nRows: 25\nColumns: 3\n$ T_0s    &lt;dbl&gt; 884.80961, 1710.55508, 1635.49818, -4947.76450, -390.13885, 83…\n$ T_1s    &lt;dbl&gt; 1165.1005, 1063.9211, 489.8264, 327.8312, 899.7244, 1197.1137,…\n$ subj_id &lt;chr&gt; \"S01\", \"S02\", \"S03\", \"S04\", \"S05\", \"S06\", \"S07\", \"S08\", \"S09\",…\n\nsubjects %&gt;%\n    pivot_longer(cols = starts_with(\"T\"), names_to = \"T_variable\",\n        values_to = \"value\") %&gt;%\n    ggplot() + geom_density(aes(value, fill = T_variable), alpha = 0.8) +\n    xlim(c(-4 * subject_varyingintercept, 4 * subject_varyingintercept)) +\n    facet_wrap(~T_variable) + ggtitle(\"Varying Intercept and Slope Terms for Subjects\") +\n    plot_theme + scale_fill_brewer(palette = \"Dark2\") + theme(axis.title.y = element_blank(),\n    axis.text.y = element_blank(), axis.ticks.y = element_blank())",
    "crumbs": [
      "Part I, Data Simulation"
    ]
  },
  {
    "objectID": "content/ExerciseDataSimulation.html#time-to-put-it-all-together",
    "href": "content/ExerciseDataSimulation.html#time-to-put-it-all-together",
    "title": "Part I, Data Simulation",
    "section": "8 Time to Put It All Together",
    "text": "8 Time to Put It All Together\nBecause all subjects respond to all items, we can set up a table of trials by making a table with every possible combination of the rows in the subject and item tables using the tidyverse function crossing(). This function generates every possible combination of rows from the subject and item tables, ensuring that each subject’s responses to each item are included in the dataset. To introduce variability reflecting the inherent fluctuations in trial-by-trial performance, we incorporate random error into each trial. This randomness is simulated by sampling values from a normal distribution with a mean of 0 and a standard deviation of sigma. This approach ensures that our dataset captures the full range of subject-item interactions while accounting for unpredictable variations in individual performance across trials.\n\n# cross subject and item IDs; add an error term nrow(.) is\n# the number of rows in the table\nParameterValues &lt;- crossing(subjects, items) %&gt;%\n    mutate(e_si = rnorm(nrow(.), mean = 0, sd = sigma))\n\nglimpse(ParameterValues)\n\nRows: 400\nColumns: 8\n$ T_0s        &lt;dbl&gt; -4947.764, -4947.764, -4947.764, -4947.764, -4947.764, -49…\n$ T_1s        &lt;dbl&gt; 327.8312, 327.8312, 327.8312, 327.8312, 327.8312, 327.8312…\n$ subj_id     &lt;chr&gt; \"S04\", \"S04\", \"S04\", \"S04\", \"S04\", \"S04\", \"S04\", \"S04\", \"S…\n$ Register    &lt;chr&gt; \"ADS\", \"ADS\", \"ADS\", \"ADS\", \"ADS\", \"ADS\", \"ADS\", \"ADS\", \"I…\n$ O_0i        &lt;dbl&gt; -998.38644, -890.03783, -776.25389, -564.45200, -477.19270…\n$ item_id     &lt;chr&gt; \"I12\", \"I10\", \"I13\", \"I09\", \"I11\", \"I16\", \"I14\", \"I15\", \"I…\n$ SpeechStyle &lt;dbl&gt; -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, 0.5, 0.5, …\n$ e_si        &lt;dbl&gt; -569.303868, 683.913590, 664.782395, 168.236399, 3.446419,…\n\n\nNow we have specified the parameters in ParameterValues, we are ready to add up everything together to create the response variable (i.e., infant looking times in milliseconds). To be more specific, we calculate the response variable, looking time, by adding together:\n\nthe grand intercept (mean_intercept),\neach subject-specific random intercept (T_0s),\neach item-specific random intercept (O_0i),\neach sum of the speech style effect (mean_slope) and the random slope (T_1s), multiplied by the numeric predictor (SpeechStyle), and\neach residual error (e_si).\n\n\n# calculate the response variable\nSimulatedRT &lt;- ParameterValues %&gt;%\n  mutate(LT = mean_intercept + T_0s + O_0i + (mean_slope + T_1s) * SpeechStyle + e_si) %&gt;% #sum together overall intercept, varying subject and item intercepts, varying subject slopes, and random error.\n  mutate(LT = LT + rexp(nrow(.), rate = 0.0003)) %&gt;% #add a long tail to the distribution to simulate exgaussian distribution of looking times\n  dplyr::select(subj_id, item_id, Register, SpeechStyle, LT)\n\nLet’s have a look at what the data we have generated looks like:\n\n# Plot of how overall looking time distributions differ\n# across ADS and IDS\nSimulatedRT %&gt;%\n    ggplot() + geom_density(aes(LT, fill = Register), alpha = 0.8) +\n    ggtitle(\"Varying Intercept and Slope Terms for Subjects\") +\n    plot_theme + scale_fill_brewer(palette = \"Dark2\") + theme(axis.title.y = element_blank(),\n    axis.text.y = element_blank(), axis.ticks.y = element_blank())\n\n\n\n\n\n\n\n# Plot of how looking times of indvidual subjects differ\n# across the two speech style\nSimulatedRT %&gt;%\n    group_by(subj_id, Register) %&gt;%\n    dplyr::summarise(medLT = mean(LT)) %&gt;%\n    ggplot(aes(x = Register, y = medLT, fill = Register)) + geom_rain(alpha = 0.8,\n    rain.side = \"f1x1\", id.long.var = \"subj_id\", point.args.pos = list(position = position_jitter(width = 0.04,\n        height = 0, seed = 42)), line.args.pos = list(position = position_jitter(width = 0.04,\n        height = 0, seed = 42))) + scale_fill_brewer(palette = \"Dark2\") +\n    ggtitle(\"Individual Subject Looking Times across Speech Styles\") +\n    xlab(\"Speech Style\") + ylab(\"Looking Time (ms)\") + scale_color_manual(values = viridis(n = 27)) +\n    plot_theme\n\n`summarise()` has grouped output by 'subj_id'. You can override using the\n`.groups` argument.\n\n\nWarning: Duplicated aesthetics after name standardisation: alpha\n\n\nWarning: Using the `size` aesthetic with geom_polygon was deprecated in ggplot2 3.4.0.\nℹ Please use the `linewidth` aesthetic instead.",
    "crumbs": [
      "Part I, Data Simulation"
    ]
  },
  {
    "objectID": "content/ExerciseDataSimulation.html#with-the-initial-setup-done-lets-automatise",
    "href": "content/ExerciseDataSimulation.html#with-the-initial-setup-done-lets-automatise",
    "title": "Part I, Data Simulation",
    "section": "9 With the Initial Setup Done, Let’s Automatise!",
    "text": "9 With the Initial Setup Done, Let’s Automatise!\nNow that we’ve simulated a dataset with the necessary properties, suitable for sophisticated linear mixed effects models, we can streamline the process by encapsulating all the preceding code into a custom function. This function will accept the parameters we defined earlier as arguments, with default values set to our chosen parameters. By doing so, we are empowered to effortlessly experiment with different parameters or generate multiple datasets for power analysis purposes. The following code condenses all the preceding steps into a single function, returning a dataset with the specified parameters.\n\n# set up the custom data simulation function\nSimulateLTData &lt;- function(\n  n_subj = 24,   # number of subjects\n  n_ADS  = 8,   # number of ingroup stimuli\n  n_IDS =  8,   # number of outgroup stimuli\n  mean_intercept = 7000,   # grand mean\n  mean_slope =  2000,   # effect of category\n  item_varyingintercept =  200,   # by-item random intercept sd\n  subject_varyingintercept = 2000,   # by-subject random intercept sd\n  subject_varyingslope =  1000,   # by-subject random slope sd\n  rho = 0.2,   # correlation between intercept and slope\n  sigma = 500) { # residual (standard deviation)\n\n  items &lt;- data.frame(\n  #item_id = seq_len(n_ADS + n_IDS),\n  Register = rep(c(\"IDS\", \"ADS\"), c(n_ADS, n_IDS)),\n  O_0i = rnorm(n = n_ADS + n_IDS, mean = 0, sd = item_varyingintercept)) %&gt;% \n  mutate(item_id = faux::make_id(nrow(.), \"I\")) %&gt;%\n  mutate(SpeechStyle = recode(Register, \"ADS\" = -0.5, \"IDS\" = +0.5))\n\n  # simulate a sample of subjects\n\n# sample from a multivariate random distribution \n  subjects &lt;- faux::rnorm_multi(\n  n = n_subj, \n  mu = 0, # means for random effects are always 0\n  sd = c(subject_varyingintercept, subject_varyingslope), # set SDs\n  r = rho, # set correlation, see ?faux::rnorm_multi\n  varnames = c(\"T_0s\", \"T_1s\")\n) %&gt;%\n  mutate(subj_id = faux::make_id(nrow(.), \"S\"))\n\n  ParameterValues &lt;- crossing(subjects, items)  %&gt;%\n    mutate(e_si = rnorm(nrow(.), mean = 0, sd = sigma)) %&gt;%\n    dplyr::select(subj_id, item_id, Register, SpeechStyle, everything())\n  \n  ParameterValues %&gt;%\n    mutate(LT = mean_intercept + T_0s + O_0i + (mean_slope + T_1s) * SpeechStyle + e_si) %&gt;%\n    mutate(LT = LT + rexp(nrow(.), rate = 0.0003)) %&gt;%\n    dplyr::select(subj_id, item_id, Register, SpeechStyle, LT)\n}",
    "crumbs": [
      "Part I, Data Simulation"
    ]
  },
  {
    "objectID": "content/ExerciseDataSimulation.html#exercises-to-check-understanding",
    "href": "content/ExerciseDataSimulation.html#exercises-to-check-understanding",
    "title": "Part I, Data Simulation",
    "section": "10 Exercises to Check Understanding",
    "text": "10 Exercises to Check Understanding",
    "crumbs": [
      "Part I, Data Simulation"
    ]
  },
  {
    "objectID": "content/ExerciseDataSimulation.html#exercise-i",
    "href": "content/ExerciseDataSimulation.html#exercise-i",
    "title": "Part I, Data Simulation",
    "section": "11 Exercise I",
    "text": "11 Exercise I\n\nHow would you adapt the above code to generate a dataset with 500 participants and no effect of SpeechStyle (i.e., distributions similar to the below plot)?\n\n\n\nShow the code\n# With our new SimulateLTData() function, the answer here\n# is fairly straightforward! We can simply specify that we\n# want to simulate 500 subjects and want a mean slope of 0,\n# like so: SimulateLTData(n_subj = 500, mean_slope = 0).\n\nLTDataSimulated &lt;- SimulateLTData(n_subj = 500, mean_slope = 0)\n\nLTDataSimulated %&gt;%\n    group_by(subj_id, Register) %&gt;%\n    dplyr::summarise(medLT = mean(LT)) %&gt;%\n    ggplot(aes(x = Register, y = medLT, fill = Register)) + geom_rain(alpha = 0.8,\n    rain.side = \"f1x1\", id.long.var = \"subj_id\", point.args.pos = list(position = position_jitter(width = 0.04,\n        height = 0, seed = 42)), line.args.pos = list(position = position_jitter(width = 0.04,\n        height = 0, seed = 42))) + scale_fill_brewer(palette = \"Dark2\") +\n    ggtitle(\"Looking Time Differences across Speech Styles\") +\n    xlab(\"Speech Style\") + ylab(\"Looking Time (ms)\") + scale_color_manual(values = viridis(n = 27)) +\n    plot_theme\n\n\n`summarise()` has grouped output by 'subj_id'. You can override using the\n`.groups` argument.",
    "crumbs": [
      "Part I, Data Simulation"
    ]
  },
  {
    "objectID": "content/ExerciseDataSimulation.html#exercise-ii",
    "href": "content/ExerciseDataSimulation.html#exercise-ii",
    "title": "Part I, Data Simulation",
    "section": "12 Exercise II:",
    "text": "12 Exercise II:\n\nWe might expect the IDS preference effect to change with infant age, such that older infants display longer looking times to IDS over ADS. How would you add a positive interaction effect of (cross-sectional) age as a predictor to the model (hint: it involves randomly sampling age for each child and adding an effect to the simulation code and model)? Try to think through the problem, get inspiration from the below plot, code up a solution, and only then click on “Show the code” to check how you might approach this.\n\n\n\nShow the code\n#The question here involves adding infant age as an interaction effect with SpeechStyle. We will approach this question by modifying the code that simulates subject-level data. Here, we will sample an age variable and pretend that we have standardised age so that its values fall between -0.5 and 0.5. We thus randomly sample and age to assign one age to each subject. We also need to specify a slope value for the influence of subject ag and place it in the start of the function; we will add subject_age = 200. Lastly, we need to change how we sum the values together, so that age has an effect on looking times, but also that the influence of age exerts different effects across the two speech styles.\n\n# set up the custom data simulation function\nSimulateLTDataWithAge &lt;- function(\n  n_subj = 24,   # number of subjects\n  n_ADS  = 8,   # number of ingroup stimuli\n  n_IDS =  8,   # number of outgroup stimuli\n  beta_0 = 7000,   # grand mean\n  beta_1 =  2000,   # effect of category\n  beta_as = 5000,\n  S_as = 200,\n  item_sd =  200,   # by-item random intercept sd\n  tau_0 = 2000,   # by-subject random intercept sd\n  tau_1 =  1000,   # by-subject random slope sd\n  rho = 0.2,   # correlation between intercept and slope\n  sigma = 500) { # residual (standard deviation)\n\n  items &lt;- data.frame(\n  #item_id = seq_len(n_ADS + n_IDS),\n  Register = rep(c(\"IDS\", \"ADS\"), c(n_ADS, n_IDS)),\n  O_0i = rnorm(n = n_ADS + n_IDS, mean = 0, sd = item_sd)) %&gt;% \n  mutate(item_id = faux::make_id(nrow(.), \"I\")) %&gt;%\n  mutate(SpeechStyle = recode(Register, \"ADS\" = 0, \"IDS\" = 1))\n\n  # simulate a sample of subjects\n\n# sample from a multivariate random distribution \n  subjects &lt;- faux::rnorm_multi(\n  n = n_subj, \n  mu = 0, # means for random effects are always 0\n  sd = c(tau_0, tau_1, S_as), # set SDs\n  r = rho, # set correlation, see ?faux::rnorm_multi\n  varnames = c(\"T_0s\", \"T_1s\", \"S_as\")\n) %&gt;%\n  mutate(subj_id = faux::make_id(nrow(.), \"S\")) %&gt;%\n  mutate(age_subj = runif(n_subj, min = -0.5, max = 0.5))\n\n  ParameterValues &lt;- crossing(subjects, items)  %&gt;%\n    mutate(e_si = rnorm(nrow(.), mean = 0, sd = sigma)) %&gt;%\n    dplyr::select(subj_id, item_id, Register, SpeechStyle, age_subj, S_as, everything())\n  \n  ParameterValues %&gt;%\n    mutate(LT = beta_0 + T_0s + O_0i + (beta_1 + T_1s) * SpeechStyle + ((beta_as + S_as) * age_subj * SpeechStyle) + e_si) %&gt;%\n    mutate(LT = LT + rexp(nrow(.), rate = 0.0003)) %&gt;%\n    dplyr::select(subj_id, item_id, Register, SpeechStyle, age_subj, LT)\n}\n\nDataWithAgeSimulated &lt;- SimulateLTDataWithAge()\nDataWithAgeSimulated %&gt;%\nggplot() + \n  geom_point(aes(y = LT, x = age_subj, color = subj_id), alpha = 0.6, size = 1, show.legend = F) + \n  geom_smooth(method = \"lm\", se = TRUE, formula = y ~ x, aes(y = LT, x = age_subj)) +\n  ggtitle(\"Age as Positive Interaction Effect\") +\n  xlab(\"Age (standardised age)\") + \n  facet_wrap(~Register) +\n  scale_color_manual(values = viridis(n = 27)) +\n  plot_theme",
    "crumbs": [
      "Part I, Data Simulation"
    ]
  },
  {
    "objectID": "content/ExerciseDataSimulation.html#exercise-iii",
    "href": "content/ExerciseDataSimulation.html#exercise-iii",
    "title": "Part I, Data Simulation",
    "section": "13 Exercise III:",
    "text": "13 Exercise III:\n\nAs mentioned above, we made the simplifying assumption that each and every stimulus item evokes exactly the same response in participants; however, certain items might elicit stronger or weaker responses depending on individual differences or contextual factors, so including varying slopes for stimulus items can help capture this heterogeneity more accurately. How could we modify the above code to include varying slopes according stimulus items? Again, try to think through the problem, get inspiration from the below plot, code up a solution, and only then click on “Show the code” to check how you might approach this.\n\n\n\nShow the code\n# set up the custom data simulation function\nSimulateLTDataWithAge &lt;- function(\n  n_subj = 24,   # number of subjects\n  n_ADS  = 8,   # number of ingroup stimuli\n  n_IDS =  8,   # number of outgroup stimuli\n  beta_0 = 7000,   # grand mean\n  beta_1 =  2000,   # effect of category\n  beta_as = 5000,\n  S_as = 200,\n  item_sd =  200,   # by-item random intercept sd\n  tau_0 = 2000,   # by-subject random intercept sd\n  tau_1 =  1000,   # by-subject random slope sd\n  rho = 0.2,   # correlation between intercept and slope\n  sigma = 500) { # residual (standard deviation)\n\n  items &lt;- data.frame(\n  #item_id = seq_len(n_ADS + n_IDS),\n  Register = rep(c(\"IDS\", \"ADS\"), c(n_ADS, n_IDS)),\n  O_0i = rnorm(n = n_ADS + n_IDS, mean = 0, sd = item_sd)) %&gt;% \n  mutate(item_id = faux::make_id(nrow(.), \"I\")) %&gt;%\n  mutate(SpeechStyle = recode(Register, \"ADS\" = 0, \"IDS\" = 1))\n\n  # simulate a sample of subjects\n\n# sample from a multivariate random distribution \n  subjects &lt;- faux::rnorm_multi(\n  n = n_subj, \n  mu = 0, # means for random effects are always 0\n  sd = c(tau_0, tau_1, S_as), # set SDs\n  r = rho, # set correlation, see ?faux::rnorm_multi\n  varnames = c(\"T_0s\", \"T_1s\", \"S_as\")\n) %&gt;%\n  mutate(subj_id = faux::make_id(nrow(.), \"S\")) %&gt;%\n  mutate(age_subj = runif(n_subj, min = -0.5, max = 0.5))\n\n  ParameterValues &lt;- crossing(subjects, items)  %&gt;%\n    mutate(e_si = rnorm(nrow(.), mean = 0, sd = sigma)) %&gt;%\n    dplyr::select(subj_id, item_id, Register, SpeechStyle, age_subj, S_as, everything())\n  \n  ParameterValues %&gt;%\n    mutate(LT = beta_0 + T_0s + O_0i + (beta_1 + T_1s) * SpeechStyle + ((beta_as + S_as) * age_subj * SpeechStyle) + e_si) %&gt;%\n    mutate(LT = LT + rexp(nrow(.), rate = 0.0003)) %&gt;%\n    dplyr::select(subj_id, item_id, Register, SpeechStyle, age_subj, LT)\n}\n\nDataWithAgeSimulated &lt;- SimulateLTDataWithAge()\nDataWithAgeSimulated %&gt;%\nggplot() + \n  geom_point(aes(y = LT, x = age_subj, color = subj_id), alpha = 0.6, size = 1, show.legend = F) + \n  geom_smooth(method = \"lm\", se = TRUE, formula = y ~ x, aes(y = LT, x = age_subj)) +\n  ggtitle(\"Age as Positive Interaction Effect\") +\n  xlab(\"Age (standardised age)\") + \n  facet_wrap(~Register) +\n  scale_color_manual(values = viridis(n = 27)) +\n  plot_theme",
    "crumbs": [
      "Part I, Data Simulation"
    ]
  },
  {
    "objectID": "content/SimulatingEffectSizes.html",
    "href": "content/SimulatingEffectSizes.html",
    "title": "Modelling Simulated Effect Size Data",
    "section": "",
    "text": "Now it’s time to consider the realm of cumulative science efforts, such as what the ManyBabies Consortium deals with. We know that science stands on the shoulder of – not giants – but normal human beings who are as susceptible to confirmation and selection biases as everyone else. Up until now, we have relied on our intuitions about infant looking times based solely on our experience with conducting infant experiments. In this section, we consider how we can make informed choices about setting parameters and how we can capitalise on cumulativec science efforts such as multi-lab replication studies and meta-analyses. Synthesising evidence from studies in a cumulative approach offers insights to the generalisability and heterogeneity of the construct across a wide variety of experimental designs, participants and stimuli. By varying experimenter identity and increasing sample diversity, these large-scale studies contribute to a greater likelihood of generalisability and precision. However, the high degree of uniformity in methodological and analytic implementation can lead to less generalisability across other conditions than a meta-analysis.\nSeeing scientific advancement as an iterative procedure involving data accumulation and theory development empowers us to map out the diversity of samples in earlier research, scrutinise the possibilities for generalisability, and point to future directions of research. For the IDS preference effect, we luckily don’t just have to rely on our individual knowledge about infant looking time experiments. We have both a multi-lab replication study and a community-augmented metaanalysis on infants’ preference to attend to IDS over ADS (ManyBabies Consortium, 2020; Zettersten, Cox, et al., 2023). We can leverage these estimates in calculating statistical power, but how do we specifially implement these effect size estimates in our apriori power analysis?",
    "crumbs": [
      "Part III, Simulating Effect Sizes"
    ]
  },
  {
    "objectID": "content/SimulatingEffectSizes.html#cumulative-science-perspective",
    "href": "content/SimulatingEffectSizes.html#cumulative-science-perspective",
    "title": "Modelling Simulated Effect Size Data",
    "section": "",
    "text": "Now it’s time to consider the realm of cumulative science efforts, such as what the ManyBabies Consortium deals with. We know that science stands on the shoulder of – not giants – but normal human beings who are as susceptible to confirmation and selection biases as everyone else. Up until now, we have relied on our intuitions about infant looking times based solely on our experience with conducting infant experiments. In this section, we consider how we can make informed choices about setting parameters and how we can capitalise on cumulativec science efforts such as multi-lab replication studies and meta-analyses. Synthesising evidence from studies in a cumulative approach offers insights to the generalisability and heterogeneity of the construct across a wide variety of experimental designs, participants and stimuli. By varying experimenter identity and increasing sample diversity, these large-scale studies contribute to a greater likelihood of generalisability and precision. However, the high degree of uniformity in methodological and analytic implementation can lead to less generalisability across other conditions than a meta-analysis.\nSeeing scientific advancement as an iterative procedure involving data accumulation and theory development empowers us to map out the diversity of samples in earlier research, scrutinise the possibilities for generalisability, and point to future directions of research. For the IDS preference effect, we luckily don’t just have to rely on our individual knowledge about infant looking time experiments. We have both a multi-lab replication study and a community-augmented metaanalysis on infants’ preference to attend to IDS over ADS (ManyBabies Consortium, 2020; Zettersten, Cox, et al., 2023). We can leverage these estimates in calculating statistical power, but how do we specifially implement these effect size estimates in our apriori power analysis?",
    "crumbs": [
      "Part III, Simulating Effect Sizes"
    ]
  },
  {
    "objectID": "content/SimulatingEffectSizes.html#simulating-effect-size-data-and-making-informed-choices",
    "href": "content/SimulatingEffectSizes.html#simulating-effect-size-data-and-making-informed-choices",
    "title": "Modelling Simulated Effect Size Data",
    "section": "2 Simulating Effect Size Data and Making Informed Choices",
    "text": "2 Simulating Effect Size Data and Making Informed Choices\nLet’s imagine a scenario where a synthesis of evidence has produced an effect size estimate of 0.35 [XX; XX], just as in Zettersten, Cox, Bergmann et al. (2024). How can we use this to guide our study of IDS preference?\nLet’s adapt our simulation function from previous pages to the new scale of effect sizes; here, we consider an effect size of 0 to denote no preference for either speech style. That is, infants prefer to attend to ADS just as much as they do to IDS.\n\n# set up the custom data simulation function\nSimulateEffectSizeData &lt;- function(\n  n_subj = 24,   # number of subjects\n  n_ADS  = 8,   # number of ingroup stimuli\n  n_IDS =  8,   # number of outgroup stimuli\n  beta_0 = 0,   # grand mean\n  beta_1 =  0.35,   # effect of category\n  omega_0 =  0.05,   # by-item random intercept sd\n  tau_0 = 0.1,   # by-subject random intercept sd\n  tau_1 =  0.1,   # by-subject random slope sd\n  rho = 0.4,   # correlation between intercept and slope\n  sigma = 0.5) { # residual (standard deviation)\n\n  items &lt;- data.frame(\n  #item_id = seq_len(n_ADS + n_IDS),\n  Register = rep(c(\"IDS\", \"ADS\"), c(n_ADS, n_IDS)),\n  O_0i = rnorm(n = n_ADS + n_IDS, mean = 0, sd = omega_0)) %&gt;% \n  mutate(item_id = faux::make_id(nrow(.), \"I\")) %&gt;%\n  mutate(SpeechStyle = recode(Register, \"ADS\" = 0, \"IDS\" = 1))\n\n  # simulate a sample of subjects\n\n# sample from a multivariate random distribution \n  subjects &lt;- faux::rnorm_multi(\n  n = n_subj, \n  mu = 0, # means for random effects are always 0\n  sd = c(tau_0, tau_1), # set SDs\n  r = rho, # set correlation, see ?faux::rnorm_multi\n  varnames = c(\"T_0s\", \"T_1s\")\n) %&gt;%\n  mutate(subj_id = faux::make_id(nrow(.), \"S\"))\n\n  ParameterValues &lt;- crossing(subjects, items)  %&gt;%\n    mutate(e_si = rnorm(nrow(.), mean = 0, sd = sigma)) %&gt;%\n    dplyr::select(subj_id, item_id, Register, SpeechStyle, everything())\n  \n  EffectSizeDataSimulated &lt;- ParameterValues %&gt;%\n    mutate(LT = beta_0 + T_0s + O_0i + (beta_1 + T_1s) * SpeechStyle + e_si) %&gt;%\n    dplyr::select(subj_id, item_id, Register, SpeechStyle, LT)\n}\n\nEffectSizeDataSimulated &lt;- SimulateEffectSizeData()\n\nLet’s again plot this data to see if it looks correct:\n\nEffectSizeDataSimulated &lt;- SimulateEffectSizeData()\n\ndat_sim_plot &lt;- EffectSizeDataSimulated %&gt;%\n    group_by(subj_id, Register) %&gt;%\n    dplyr::summarise(medLT = mean(LT))\n\n`summarise()` has grouped output by 'subj_id'. You can override using the\n`.groups` argument.\n\nggplot(aes(x = Register, y = medLT, fill = Register), data = dat_sim_plot) +\n    geom_rain(alpha = 0.8, rain.side = \"f1x1\", id.long.var = \"subj_id\",\n        point.args.pos = list(position = position_jitter(width = 0.04,\n            height = 0, seed = 42)), line.args.pos = list(position = position_jitter(width = 0.04,\n            height = 0, seed = 42))) + scale_fill_brewer(palette = \"Dark2\") +\n    ggtitle(\"Effect Size Differences across Speech Styles\") +\n    xlab(\"Speech Style\") + ylab(\"Effect Size\") + scale_color_manual(values = viridis(n = 27)) +\n    plot_theme",
    "crumbs": [
      "Part III, Simulating Effect Sizes"
    ]
  },
  {
    "objectID": "content/SimulatingEffectSizes.html#time-to-power-up-the-analysis",
    "href": "content/SimulatingEffectSizes.html#time-to-power-up-the-analysis",
    "title": "Modelling Simulated Effect Size Data",
    "section": "3 Time to Power-Up the Analysis",
    "text": "3 Time to Power-Up the Analysis\n\n# simulate, analyze, and return a table of parameter\n# estimates\nSimulateAndModelEFData &lt;- function(...) {\n    dataSimulated &lt;- SimulateEffectSizeData()\n\n    model &lt;- lmer(LT ~ 1 + SpeechStyle + (1 | item_id) + (1 +\n        SpeechStyle | subj_id), data = dataSimulated)\n    # family = gaussian(link = 'log'))\n\n    broom.mixed::tidy(model)\n}\n\n# run simulations and save to a file\nn_runs &lt;- 100  # use at least 100 to get stable estimates\nsimulations &lt;- purrr::map_df(1:n_runs, ~SimulateAndModelEFData())\n\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\n\nwrite_csv(simulations, \"EFsimulations.csv\")\n\n\n# read saved simulation data\nsims &lt;- read_csv(\"EFsimulations.csv\", col_types = cols(\n  # makes sure plots display in this order\n  group = col_factor(ordered = TRUE),\n  term = col_factor(ordered = TRUE)\n  )) %&gt;%\n  filter(effect == \"fixed\") %&gt;%\n  dplyr::select(term, estimate, std.error, p.value)\n\n# calculate mean estimates and power for specified alpha\nalpha &lt;- 0.05\n\nsims %&gt;% \n  group_by(term) %&gt;%\n  dplyr::summarize(\n    mean_estimate = mean(estimate),\n    mean_se = mean(std.error),\n    power = mean(p.value &lt; alpha),\n    .groups = \"drop\"\n  )\n\n# A tibble: 2 × 4\n  term        mean_estimate mean_se power\n  &lt;fct&gt;               &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;\n1 (Intercept)     -0.000564  0.0460  0.04\n2 SpeechStyle      0.352     0.0648  1   \n\n\nThis looks wonderful. If we were designing a study that perfectly emulated the average experiment included in the ManyBabies multi-lab replication study or that in the meta-analysis, we would have enough power with 24 participants and 8 stimulus items. As we saw in the previous exercise sheet, however, our experimental design choices really matter for statistical power. For example, the number of stimulus items (i.e., number of repeated measures per participant) matter hugely, as does number of participants. How can we efficiently explore the multiverse of choices that govern our experimental design and get a better grasp on which parameters matter?",
    "crumbs": [
      "Part III, Simulating Effect Sizes"
    ]
  },
  {
    "objectID": "content/SimulatingEffectSizes.html#using-grid-searches-to-explore-the-multiverse-of-experimenter-choices",
    "href": "content/SimulatingEffectSizes.html#using-grid-searches-to-explore-the-multiverse-of-experimenter-choices",
    "title": "Modelling Simulated Effect Size Data",
    "section": "4 Using Grid Searches to Explore the Multiverse of Experimenter Choices",
    "text": "4 Using Grid Searches to Explore the Multiverse of Experimenter Choices\nLet’s set up a grid search and allow models to be fit with different parameter values. To do this, we will wrap our Simulation and Modelling function with a higher-level function that inputs a series of parameter combinations that we are interested in exploring further. Here is a suggestion for a function of this type:\n\nrun_sims_grid_point &lt;- function(filename_full, trial_n, subj_n) {\n    ADS_n = trial_n/2\n    IDS_n = trial_n/2\n    n_subj = subj_n\n\n    dataSimulated &lt;- SimulateEffectSizeData(n_subj = n_subj,\n        n_ADS = ADS_n, n_IDS = IDS_n)\n\n    model &lt;- lmer(LT ~ 1 + SpeechStyle + (1 | item_id) + (1 +\n        SpeechStyle | subj_id), data = dataSimulated)\n\n    sim_results &lt;- broom.mixed::tidy(model)\n\n    # append the results to a file\n    append &lt;- file.exists(filename_full)\n    write_csv(sim_results, filename_full, append = append)\n\n    # return the tidy table\n    sim_results\n}\n\nreps &lt;- 2\nsubj_n &lt;- seq(12, 36, by = 12)\ntrial_n &lt;- seq(4, 16, by = 4)\n\nparam_combinations &lt;- expand.grid(subj_n = subj_n, trial_n = trial_n)\n\nfor (i in seq_len(nrow(param_combinations))) {\n    sim_params &lt;- param_combinations[i, ]\n    filename_full &lt;- paste0(here(\"sims_grid_search/test_grid_search_\"),\n        sim_params$subj_n, \"_\", sim_params$trial_n, \".csv\")\n    start_time &lt;- Sys.time()  # Start time\n    sims &lt;- purrr::map_df(1:reps, ~run_sims_grid_point(filename_full = filename_full,\n        subj_n = sim_params$subj_n, trial_n = sim_params$trial_n))\n    end_time &lt;- Sys.time()  # End time\n    cat(\"Simulation\", i, \"Time elapsed:\", end_time - start_time,\n        \"\\n\")\n}\n\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\n\n\nSimulation 1 Time elapsed: 0.2940099 \n\n\nboundary (singular) fit: see help('isSingular')\n\n\nWarning: Model failed to converge with 1 negative eigenvalue: -2.2e+00\n\n\nSimulation 2 Time elapsed: 0.254477 \n\n\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\n\n\nSimulation 3 Time elapsed: 0.2533939 \n\n\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\n\n\nWarning: Model failed to converge with 1 negative eigenvalue: -4.4e+00\n\n\nSimulation 4 Time elapsed: 0.2804399 \n\n\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\n\n\nWarning: Model failed to converge with 1 negative eigenvalue: -1.6e+01\n\n\nSimulation 5 Time elapsed: 0.286119 \n\n\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\n\n\nWarning: Model failed to converge with 1 negative eigenvalue: -1.0e+02\n\n\nSimulation 6 Time elapsed: 0.325536 \n\n\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\n\n\nSimulation 7 Time elapsed: 0.248523 \n\n\nboundary (singular) fit: see help('isSingular')\n\n\nWarning: Model failed to converge with 1 negative eigenvalue: -2.3e+00\n\n\nboundary (singular) fit: see help('isSingular')\n\n\nWarning: Model failed to converge with 1 negative eigenvalue: -8.4e+01\n\n\nSimulation 8 Time elapsed: 0.2982771 \n\n\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\n\n\nSimulation 9 Time elapsed: 0.2878799 \n\n\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\n\n\nWarning: Model failed to converge with 1 negative eigenvalue: -1.3e+00\n\n\nSimulation 10 Time elapsed: 0.2580292 \n\n\nboundary (singular) fit: see help('isSingular')\n\n\nSimulation 11 Time elapsed: 0.2989841 \n\n\nboundary (singular) fit: see help('isSingular')\n\n\nSimulation 12 Time elapsed: 0.2804098 \n\nsetwd(here(\"sims_grid_search\"))\nfile_names &lt;- list.files(pattern = \"*.csv\")\n\n# read in all CSV files into a list of dataframes\ndf_list &lt;- purrr::map(file_names, ~{\n    df &lt;- read.csv(.x)\n    df$filename &lt;- .x\n    df\n})\n\ndf &lt;- purrr::reduce(df_list, dplyr::bind_rows)\n\ndf_per_sim &lt;- df %&gt;%\n    filter(effect == \"fixed\") %&gt;%\n    filter(term == \"SpeechStyle\") %&gt;%\n    group_by(filename) %&gt;%\n    summarise(median_estimate = median(estimate), median_se = median(std.error),\n        power = mean(p.value &lt; 0.05))\n\nPowerGridData &lt;- df_per_sim %&gt;%\n    mutate(n_subj = sapply(strsplit(filename, \"_\"), `[`, 4),\n        n_trial = as.numeric(str_replace(sapply(strsplit(filename,\n            \"_\"), `[`, 5), pattern = \".csv\", \"\")))\n\nggplot(PowerGridData) + geom_point(aes(x = n_subj, y = power)) +\n    plot_theme + facet_wrap(~n_trial)\n\n\n\n\n\n\n\n\n\nmod_sim &lt;- lmer(LT ~ 1 + SpeechStyle + (1 | item_id) + (1 + SpeechStyle |\n    subj_id), data = EffectSizeDataSimulated)\n\nboundary (singular) fit: see help('isSingular')\n\nsummary(mod_sim)\n\nLinear mixed model fit by REML. t-tests use Satterthwaite's method [\nlmerModLmerTest]\nFormula: LT ~ 1 + SpeechStyle + (1 | item_id) + (1 + SpeechStyle | subj_id)\n   Data: EffectSizeDataSimulated\n\nREML criterion at convergence: 555.3\n\nScaled residuals: \n     Min       1Q   Median       3Q      Max \n-2.94648 -0.64247 -0.03434  0.70657  2.80209 \n\nRandom effects:\n Groups   Name        Variance  Std.Dev.  Corr\n subj_id  (Intercept) 1.828e-02 0.1351933     \n          SpeechStyle 1.443e-02 0.1201233 1.00\n item_id  (Intercept) 5.544e-08 0.0002355     \n Residual             2.243e-01 0.4735943     \nNumber of obs: 384, groups:  subj_id, 24; item_id, 16\n\nFixed effects:\n            Estimate Std. Error       df t value Pr(&gt;|t|)    \n(Intercept) -0.06540    0.04393 29.10355  -1.489    0.147    \nSpeechStyle  0.38856    0.05420 45.38530   7.169 5.47e-09 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nCorrelation of Fixed Effects:\n            (Intr)\nSpeechStyle -0.206\noptimizer (nloptwrap) convergence code: 0 (OK)\nboundary (singular) fit: see help('isSingular')",
    "crumbs": [
      "Part III, Simulating Effect Sizes"
    ]
  },
  {
    "objectID": "content/publishing.html",
    "href": "content/publishing.html",
    "title": "Publishing",
    "section": "",
    "text": "To get your Quarto webpage to show up with the url\nyou have a few steps."
  },
  {
    "objectID": "content/publishing.html#turn-on-github-pages-for-your-repo",
    "href": "content/publishing.html#turn-on-github-pages-for-your-repo",
    "title": "Publishing",
    "section": "1 Turn on GitHub Pages for your repo",
    "text": "1 Turn on GitHub Pages for your repo\n\nTurn on GitHub Pages under Settings &gt; Pages . You will set pages to be made from the gh-pages branch and the root directory.\nTurn on GitHub Actions under Settings &gt; Actions &gt; General\n\nThe GitHub Action will automatically recreate your website when you push to GitHub after you do the initial gh-pages set-up"
  },
  {
    "objectID": "content/publishing.html#do-your-first-publish-to-gh-pages",
    "href": "content/publishing.html#do-your-first-publish-to-gh-pages",
    "title": "Publishing",
    "section": "2 Do your first publish to gh-pages",
    "text": "2 Do your first publish to gh-pages\nThe first time you publish to gh-pages, you need to do so locally.\n\nOn your local computer, open a terminal window and cd to your repo directory. Here is what that cd command looks like for me. You command will look different because your local repo will be somewhere else on your computer.\n\ncd ~/Documents/GitHub/NOAA-quarto-simple\n\nPublish to the gh-pages. In the terminal type\n\nquarto publish gh-pages\nThis is going to render your webpage and then push the _site contents to the gh-pages branch."
  },
  {
    "objectID": "content/publishing.html#dont-like-using-gh-pages",
    "href": "content/publishing.html#dont-like-using-gh-pages",
    "title": "Publishing",
    "section": "3 Don’t like using gh-pages?",
    "text": "3 Don’t like using gh-pages?\nIn some cases, you don’t want your website on the gh-pages branch. For example, if you are creating releases and you want the website pages archived in that release, then you won’t want your website pages on the gh-pages branch.\nHere are the changes you need to make if you to avoid gh-pages branch.\n\nAt the top of _quarto.yml add the following:\n\nproject: \n  type: website\n  output-dir: docs\n\nOn GitHub under Settings &gt; Pages set pages to be made from the main branch and the docs directory.\nMake sure docs is not listed in .gitignore\nPublish the site the first time locally using quarto publish from the terminal\nChange the GitHub Action because you can’t use quarto publish gh-pages. You’ll need to push to the main branch yourself (in the GitHub Action)\n\non:\n  push:\n    branches: main\n\nname: Render and Publish\n\njobs:\n  build-deploy:\n    runs-on: ubuntu-latest\n    env:\n      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}\n\n    steps:\n      - name: Check out repository\n        uses: actions/checkout@v2 \n        \n      - name: Set up R (needed for Rmd)\n        uses: r-lib/actions/setup-r@v2\n\n      - name: Install packages (needed for Rmd)\n        run: Rscript -e 'install.packages(c(\"rmarkdown\", \"knitr\", \"jsonlite\"))'\n\n      - name: Set up Quarto\n        uses: quarto-dev/quarto-actions/setup@v2\n        with:\n          # To install LaTeX to build PDF book \n          # tinytex: true \n          # uncomment below and fill to pin a version\n          # version: 0.9.600\n      \n      - name: Render Quarto Project\n        uses: quarto-dev/quarto-actions/render@v2\n        with:\n          to: html\n\n      - name: Set up Git\n        run: |\n          git config --local user.email \"actions@github.com\"\n          git config --local user.name \"GitHub Actions\"\n\n      - name: Commit all changes and push\n        run: |\n          git add -A && git commit -m 'Build site' || echo \"No changes to commit\"\n          git push origin || echo \"No changes to commit\""
  },
  {
    "objectID": "content/ModellingTheData.html#modelling-the-simulated-data",
    "href": "content/ModellingTheData.html#modelling-the-simulated-data",
    "title": "Part II, Modelling the Simulated Data",
    "section": "2 Modelling the Simulated Data",
    "text": "2 Modelling the Simulated Data\nLet’s think about how we want to run a generalised linear mixed-effects model of the data. For a varying intercepts, varying slopes model for each subject, we could run the following model with the lmer syntax as follows:\n\nLT ~ 1 + SpeechStyle + (1 | item_id) + (1 + SpeechStyle | subj_id)\n\nIn this model, LT is the looking time response variable; 1 corresponds to the average intercept; SpeechStyle is the predictor for the ADS/IDS manipulation for item i; (1 | item_id) specifies a by-subject random intercept (O_0i); (1 + SpeechStyle | subj_id) specifies a subject-specific random intercept (T_0s) plus the subject-specific random slope of SpeechStyle (T_1s). The error term (e_si) is automatically included in all models, so is left implicit in the above formula. The terms in parentheses with the “pipe” separator (|) define the random effects structure. For each of these bracketed terms, the left-hand side of the pipe names the effects you wish to allow to vary and the right hand side names the variable identifying the levels of the random factor over which the terms vary (e.g., subjects or items). The first term, (1 | item_id) allows the intercept (1) to vary over the random factor of items (item_id). This is an instruction to estimate the parameter underlying the O_0i values, namely omega_0. The second term, (1 + X_i | subj_id), allows both the intercept and the effect of category (coded by X_i) to vary over the random factor of subjects (subj_id). It is an instruction to estimate the three parameters that underlie the T_0s and T_1s values, namely tau_0, tau_1, and rho.\nGiven that looking time data tends to be right-skewed (and we added an exponential component to simulation to emulate this), we can model the data using a logarithmic link function to take this into account. The GLMM would look as follows. We will use the summary() function to view the results.\n\ndataSimulated &lt;- SimulateLTData()\n\nmodel &lt;- glmer(LT ~ 1 + SpeechStyle + (1 | item_id) + (1 + SpeechStyle |\n    subj_id), data = dataSimulated, family = Gamma(link = \"log\"))\n\nboundary (singular) fit: see help('isSingular')\n\nsummary(model)\n\nGeneralized linear mixed model fit by maximum likelihood (Laplace\n  Approximation) [glmerMod]\n Family: Gamma  ( log )\nFormula: LT ~ 1 + SpeechStyle + (1 | item_id) + (1 + SpeechStyle | subj_id)\n   Data: dataSimulated\n\n     AIC      BIC   logLik deviance df.resid \n  1828.9   1846.8   -907.4   1814.9       89 \n\nScaled residuals: \n    Min      1Q  Median      3Q     Max \n-2.5511 -0.4268 -0.0970  0.3229  3.4173 \n\nRandom effects:\n Groups   Name        Variance  Std.Dev.  Corr \n subj_id  (Intercept) 3.170e-02 1.780e-01      \n          SpeechStyle 5.417e-02 2.327e-01 -0.17\n item_id  (Intercept) 3.251e-10 1.803e-05      \n Residual             8.380e-02 2.895e-01      \nNumber of obs: 96, groups:  subj_id, 24; item_id, 4\n\nFixed effects:\n            Estimate Std. Error t value Pr(&gt;|z|)    \n(Intercept) 9.208641   0.002411  3820.2   &lt;2e-16 ***\nSpeechStyle 0.311142   0.002407   129.3   &lt;2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nCorrelation of Fixed Effects:\n            (Intr)\nSpeechStyle -0.001\noptimizer (Nelder_Mead) convergence code: 0 (OK)\nboundary (singular) fit: see help('isSingular')\n\n\nThe estimates in this model are on the logarithmic scale; we can exponentiate the model estimates to convert back to the scale of milliseconds, and if we do so, we can see that the model estimates resemble the looking times we simulated in the previous exercise.",
    "crumbs": [
      "Part II, ModellingTheData"
    ]
  },
  {
    "objectID": "content/ModellingTheData.html#running-the-power-analysis",
    "href": "content/ModellingTheData.html#running-the-power-analysis",
    "title": "Part II, Modelling the Simulated Data",
    "section": "3 Running the Power Analysis",
    "text": "3 Running the Power Analysis\nNow we have two essential components to perform a simulation-based power analysis: i) a code pipeline to generate data for our research question and ii) a clear idea of how we want to model the data. Now it’s time to run the actual power analysis. The way we do this is to specify an effect, run a model and count how many of the models show significant effects (i.e., the ground truth). For this, we would like a function that capitalises on our previous SimulateLTData() function; that is, if we include both the simulation and modelling of the data in one function, we can simplify the process of performing a power analysis. We will call this function SimulateAndModelLTData(), and we will use broom.mixed::tidy(model) to obtain a dataframe with the relevant results.\n\n# simulate, analyze, and return a table of parameter\n# estimates\nSimulateAndModelLTData &lt;- function(...) {\n    dataSimulated &lt;- SimulateLTData()\n\n    model &lt;- lmer(LT ~ 1 + SpeechStyle + (1 | item_id) + (1 +\n        SpeechStyle | subj_id), data = dataSimulated)\n    # family = gaussian(link = 'log'))\n\n    broom.mixed::tidy(model)\n}\nSimulateAndModelLTData()\n\nboundary (singular) fit: see help('isSingular')\n\n\n# A tibble: 7 × 8\n  effect   group    term            estimate std.error statistic    df   p.value\n  &lt;chr&gt;    &lt;chr&gt;    &lt;chr&gt;              &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt; &lt;dbl&gt;     &lt;dbl&gt;\n1 fixed    &lt;NA&gt;     (Intercept)     10284.        566.    18.2    23.2  3.03e-15\n2 fixed    &lt;NA&gt;     SpeechStyle      -184.        750.    -0.245  39.1  8.08e- 1\n3 ran_pars subj_id  sd__(Intercept)  2213.         NA     NA      NA   NA       \n4 ran_pars subj_id  cor__(Intercep…    -1.00       NA     NA      NA   NA       \n5 ran_pars subj_id  sd__SpeechStyle  1552.         NA     NA      NA   NA       \n6 ran_pars item_id  sd__(Intercept)     0          NA     NA      NA   NA       \n7 ran_pars Residual sd__Observation  3333.         NA     NA      NA   NA       \n\n\nNow we have a function to generate data, run our model and spit out the results! Now it’s time to repeat a few hundred times, so that we can calculate how much power we have with our given parameters (i.e., how often the ground truth is discovered given the data and model chosen). We are going to use map_df() to run the simulation and modelling function 100 times and write it to a .csv file.\n\n# run simulations and save to a file\nn_runs &lt;- 100  # use at least 100 to get stable estimates\nsimulations &lt;- purrr::map_df(1:n_runs, ~SimulateAndModelLTData())\n\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\nboundary (singular) fit: see help('isSingular')\n\nwrite_csv(simulations, \"LTsimulations.csv\")\n\nIf run correctly, that should have produced a .csv file with model results from each new simulation of data. Let’s read in the results and have a look at what they say!\n\n# read saved simulation data\nsims &lt;- read_csv(\"LTsimulations.csv\", col_types = cols(\n  # makes sure plots display in this order\n  group = col_factor(ordered = TRUE),\n  term = col_factor(ordered = TRUE)\n  )) %&gt;%\n  filter(effect == \"fixed\") %&gt;%\n  dplyr::select(term, estimate, std.error, p.value)\n\n# calculate mean estimates and power for specified alpha\nalpha &lt;- 0.05\n\nsims %&gt;% \n  group_by(term) %&gt;%\n  dplyr::summarize(\n    mean_estimate = mean(estimate),\n    mean_se = mean(std.error),\n    power = mean(p.value &lt; alpha),\n    .groups = \"drop\"\n  )\n\n# A tibble: 2 × 4\n  term        mean_estimate mean_se power\n  &lt;fct&gt;               &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;\n1 (Intercept)        10170.    548.  1   \n2 SpeechStyle         2061.    808.  0.49\n\n\nAfter running this model a couple of hundred times, we can converge on values for power that are &gt; .80 - perfect for our little study on the IDS preference effect. However, we should note the limitations in this approach. There are a bunch of assumptions that went into specifying the different parameters, and we need a way to grid search through values to put the power results into perspective. We turn to this problem in the next exercise sheet, but first, let’s make sure that we’ve understood the principles behind data simulation and power analysis.\nExercise 2: Let’s explore the effect of repeated measures on power. Try to run a power analysis with each subject receiving two items and another power analysis with each subject receiving 15 items. What happens to the estimate of statistical power?\nWrite your answer here:",
    "crumbs": [
      "Part II, ModellingTheData"
    ]
  },
  {
    "objectID": "content/FurtherResources.html",
    "href": "content/FurtherResources.html",
    "title": "Further Resources",
    "section": "",
    "text": "Thank you so much to the Teaching, Training and Open Science Committee at ManyBabies for supporting the creation of this workshop! I take full responsibility for all mistakes. I have taken inspiration from the following ressources and would recommend them for everyone who is interested in this topic:\n\nDeBruine, L. M., & Barr, D. J. (2021). Understanding mixed-effects models through data simulation. Advances in Methods and Practices in Psychological Science, 4(1), 2515245920965119.\n\nKoch, T., Pargent, F., Kleine, A. K., Lermer, E., & Gaube, S. (2023). A Tutorial on Tailored Simulation-Based Power Analysis for Experimental Designs with Generalized Linear Mixed Models. PsyArxiv: https://osf.io/preprints/psyarxiv/rpjem/.\n\nLakens, D., & Caldwell, A. R. (2021). Simulation-based power analysis for factorial analysis of variance designs. Advances in Methods and Practices in Psychological Science, 4(1), 2515245920951503.",
    "crumbs": [
      "Further Resources"
    ]
  }
]