[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Workshop on Data Simulation & Power Analysis",
    "section": "",
    "text": "Welcome! This website will form the basis of the 2024 ManyBabies workshop on Data Simulation & Power Analysis. Before we start, I would like to emphasise that this workshop has grown out of discussion with lots of different people and is a true collaborative effort, which accords nicely with the general philosophy of ManyBabies projects. The approach to data simulation and power analysis explored here is closely associated with the data analysis team on the ManyBabies5 project (https://manybabies.org/MB5/). This series of meetings among researchers on the data analysis team was a fundamentally exploratory process being guided by a what-if mindset.\nFor example, how do predictors with two or three levels impact the power to detect an effect on infant looking times? How does variability in individual labs come to affect generalisability and statistical power? What is the optimal balance between various pracical constraints (e.g., an upper bound on the number of stimulus items that infants can attend to) and statistical inference (e.g., how much of a decrease in power are we willing to accept based on the above constraints)? Can these results inform the experimental design in some way and improve chances of replicability?\nThis workshop assumes a little literacy in R and linear mixed-effects models, but I have attempted to make these subjects as accessible as possible, even without knowledge of these topics. If you are interested in gaining hands-on pracical experience with the code, then feel free to download the following .Rmd files with the code, so that you can get a better idea of what each code snippet does and can manipulate them according to your own needs and studies.\n\n\nDownload ExerciseDataSimulation.qmd\n\n\nLINK TO EXERCISE SHEET, PART 1 LINK TO EXERCISE SHEET, PART 2 *LINK TO EXERCISE SHEET, PART 3\nI hope that this will be fun experience and useful exploration of data simulation, power analysis, statistical modelling and programming, and if you have any questions, big or small, feel free to contact me on chris[dot]mm[dot]cox@gmail.com.",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "content/FurtherResources.html",
    "href": "content/FurtherResources.html",
    "title": "Further Resources",
    "section": "",
    "text": "Thank you so much to the Teaching, Training and Open Science Committee at ManyBabies for supporting the creation of this workshop! I take full responsibility for all mistakes. I have taken inspiration from the following ressources and would recommend them for everyone who is interested in this topic:\n\nDeBruine, L. M., & Barr, D. J. (2021). Understanding mixed-effects models through data simulation. Advances in Methods and Practices in Psychological Science, 4(1), 2515245920965119.\nKoch, T., Pargent, F., Kleine, A. K., Lermer, E., & Gaube, S. (2023). A Tutorial on Tailored Simulation-Based Power Analysis for Experimental Designs with Generalized Linear Mixed Models. PsyArxiv: https://osf.io/preprints/psyarxiv/rpjem/.\nLakens, D., & Caldwell, A. R. (2021). Simulation-based power analysis for factorial analysis of variance designs. Advances in Methods and Practices in Psychological Science, 4(1), 2515245920951503.\nhttps://rpsychologist.com/cohend/",
    "crumbs": [
      "Further Resources"
    ]
  },
  {
    "objectID": "content/ModellingTheData.html",
    "href": "content/ModellingTheData.html",
    "title": "Part II, Modelling the Simulated Data",
    "section": "",
    "text": "We know that science stands on the shoulder of – not giants – but normal human beings who are as susceptible to confirmation and selection biases as everyone else. And up until now, we have relied on our intuitions about infant looking times based solely on our experience with conducting infant experiments. In the first exercise, it quickly became clear that we relied heavily on our own intuitions about what we know about the domain of infant looking times. In this section, we consider how to improve our data simulation process by capitalising on cumulative science efforts, such as meta-analyses and multi-lab replication studies. Seeing scientific advancement as an iterative procedure involving data accumulation and synthesis really empowers us to map out the diversity of samples in earlier research, scrutinise the possibilities for generalisability, and point to future directions of research.\nFor the IDS preference effect, for example, we can thank the ManyBabies community for conducting both a multi-lab replication study and a community-augmented meta-analysis on infants’ preference to attend to IDS over ADS (ManyBabies Consortium, 2020; Zettersten, Cox, et al., 2023). By synthesising data across such a wide variety of experimental designs, participants and stimuli, we now have a fairly good estimate of the overall magnitude of the IDS preference effect. Both sources of evidence converge on an effect size of 0.35 with 95% CI of [0.16; 0.47].\nWhen calculating power, we need to leverage results from these cumulative science efforts so that we can engage in iterative development of our estimates and theories. This section delves into the realm of effect sizes and teaches you how to implement a power analysis based on an effect size estimate.",
    "crumbs": [
      "Part II, ModellingTheData"
    ]
  },
  {
    "objectID": "content/ModellingTheData.html#cumulative-science-and-prior-knowledge",
    "href": "content/ModellingTheData.html#cumulative-science-and-prior-knowledge",
    "title": "Part II, Modelling the Simulated Data",
    "section": "",
    "text": "We know that science stands on the shoulder of – not giants – but normal human beings who are as susceptible to confirmation and selection biases as everyone else. And up until now, we have relied on our intuitions about infant looking times based solely on our experience with conducting infant experiments. In the first exercise, it quickly became clear that we relied heavily on our own intuitions about what we know about the domain of infant looking times. In this section, we consider how to improve our data simulation process by capitalising on cumulative science efforts, such as meta-analyses and multi-lab replication studies. Seeing scientific advancement as an iterative procedure involving data accumulation and synthesis really empowers us to map out the diversity of samples in earlier research, scrutinise the possibilities for generalisability, and point to future directions of research.\nFor the IDS preference effect, for example, we can thank the ManyBabies community for conducting both a multi-lab replication study and a community-augmented meta-analysis on infants’ preference to attend to IDS over ADS (ManyBabies Consortium, 2020; Zettersten, Cox, et al., 2023). By synthesising data across such a wide variety of experimental designs, participants and stimuli, we now have a fairly good estimate of the overall magnitude of the IDS preference effect. Both sources of evidence converge on an effect size of 0.35 with 95% CI of [0.16; 0.47].\nWhen calculating power, we need to leverage results from these cumulative science efforts so that we can engage in iterative development of our estimates and theories. This section delves into the realm of effect sizes and teaches you how to implement a power analysis based on an effect size estimate.",
    "crumbs": [
      "Part II, ModellingTheData"
    ]
  },
  {
    "objectID": "content/ModellingTheData.html#simulating-effect-size-data-and-making-informed-choices",
    "href": "content/ModellingTheData.html#simulating-effect-size-data-and-making-informed-choices",
    "title": "Part II, Modelling the Simulated Data",
    "section": "2 Simulating Effect Size Data and Making Informed Choices",
    "text": "2 Simulating Effect Size Data and Making Informed Choices\nLet’s continue with our IDS preference example and take inspiration from the ManyBabies1 estimate (https://doi.org/10.1177/2515245919900809) to think about how we would simulate data for a new experimental study on the IDS preference effect. Because we are still interested in a within-subjects, between-items study, we can rely on the simulation function from the previous page. All we have to do is to adapt the simulation function so that it suits the new scale of effect sizes. Effect size is a simple way of quantifying the size of the difference between two groups. It allows us to move beyond the “Does it work?” question to “How well does it work in a range of contexts?”. In short, the effect size is based on the standardised mean difference, and quantifies the difference between two means in terms of standard deviation units; an effect size of 0.35 thus implies a difference between the two groups of 0.35 standard deviations.",
    "crumbs": [
      "Part II, ModellingTheData"
    ]
  },
  {
    "objectID": "content/ModellingTheData.html#adapting-our-simulation-function",
    "href": "content/ModellingTheData.html#adapting-our-simulation-function",
    "title": "Part II, Modelling the Simulated Data",
    "section": "3 Adapting our Simulation Function",
    "text": "3 Adapting our Simulation Function\nLet’s adapt our simulation function from previous pages to the new scale of effect sizes and call it SimulateEffectSizeData(). Following ManyBabies Consortium (2020), a positive effect size denotes longer looking times to IDS stimuli over ADS stimuli, and an effect size of 0 denotes no preference for either speech style (i.e., similar looking times to ADS and IDS stimuli).\n\n# set up the custom data simulation function\nSimulateEffectSizeData &lt;- function(\n  n_subj = 24,   # number of subjects\n  n_ADS  = 8,   # number of ingroup stimuli\n  n_IDS =  8,   # number of outgroup stimuli\n  mean_intercept = 0,   # grand mean\n  mean_slope =  0.35,   # effect of category\n  item_varyingintercept =  0.05,   # by-item random intercept sd\n  item_varyingslope =  0.05,   # by-item random intercept sd\n  subject_varyingintercept = 0.1,   # by-subject random intercept sd\n  subject_varyingslope =  0.1,   # by-subject random slope sd\n  rho = 0.2,   # correlation between intercept and slope\n  sigma = 0.3) { # residual (standard deviation)\n\n    items &lt;- data.frame(\n  #item_id = seq_len(n_ADS + n_IDS),\n  Register = rep(c(\"IDS\", \"ADS\"), c(n_ADS, n_IDS)),\n  faux::rnorm_multi(\n  n = n_ADS + n_IDS, \n  mu = 0, # means for random effects are always 0\n  sd = c(item_varyingintercept, item_varyingslope),\n  r = rho,\n  varnames = c(\"item_sd\", \"item_slope_sd\"))) %&gt;%\n    mutate(item_id = faux::make_id(n_ADS + n_IDS, \"I\")) %&gt;%\n    mutate(SpeechStyle = recode(Register, \"ADS\" = 0, \"IDS\" = 1))\n\n  # simulate a sample of subjects\n\n# sample from a multivariate random distribution \n  subjects &lt;- faux::rnorm_multi(\n  n = n_subj, \n  mu = 0, # means for random effects are always 0\n  sd = c(subject_varyingintercept, subject_varyingslope), # set SDs\n  r = rho, # set correlation, see ?faux::rnorm_multi\n  varnames = c(\"subject_sd\", \"subject_slope_sd\")\n) %&gt;%\n  mutate(subj_id = faux::make_id(nrow(.), \"S\"))\n\n  ParameterValues &lt;- crossing(subjects, items)  %&gt;%\n    mutate(e_si = rnorm(nrow(.), mean = 0, sd = sigma)) %&gt;%\n    dplyr::select(subj_id, item_id, Register, SpeechStyle, everything())\n  \n  ParameterValues %&gt;%\n    mutate(EF = mean_intercept + subject_sd + item_sd + (mean_slope + subject_slope_sd + item_varyingslope) * SpeechStyle + e_si) %&gt;%\n    dplyr::select(subj_id, item_id, Register, SpeechStyle, EF)\n}\n\n\nEffectSizeDataSimulated &lt;- SimulateEffectSizeData()\nEffectSizeDataSimulated %&gt;%\n    ggplot() + geom_density(aes(EF, fill = Register), alpha = 0.8) +\n    geom_vline(xintercept = 0.35, linetype = 3) + geom_vline(xintercept = 0,\n    linetype = 3) + xlim(c(-5 * 0.35, 5 * 0.35)) + ggtitle(\"IDS Preference Effect in Effect Sizes\") +\n    plot_theme + scale_fill_brewer(palette = \"Dark2\") + theme(axis.title.y = element_blank(),\n    axis.text.y = element_blank(), axis.ticks.y = element_blank())\n\n\n\n\n\n\n\n\n\nEffectSizeDataSimulated %&gt;%\n    group_by(subj_id, Register) %&gt;%\n    dplyr::summarise(medLT = mean(EF), .groups = \"drop\") %&gt;%\n    ggplot(aes(x = Register, y = medLT, fill = Register)) + geom_rain(alpha = 0.8,\n    rain.side = \"f1x1\", id.long.var = \"subj_id\", point.args.pos = list(position = position_jitter(width = 0.04,\n        height = 0, seed = 42)), line.args.pos = list(position = position_jitter(width = 0.04,\n        height = 0, seed = 42))) + scale_fill_brewer(palette = \"Dark2\") +\n    ggtitle(\"Subject-Level Differences across Speech Styles\") +\n    xlab(\"Speech Style\") + ylab(\"Effect Size\") + plot_theme",
    "crumbs": [
      "Part II, ModellingTheData"
    ]
  },
  {
    "objectID": "content/ModellingTheData.html#a-linear-mixed-effects-model-of-simulated-effect-size-data",
    "href": "content/ModellingTheData.html#a-linear-mixed-effects-model-of-simulated-effect-size-data",
    "title": "Part II, Modelling the Simulated Data",
    "section": "4 A Linear Mixed Effects Model of Simulated Effect Size Data",
    "text": "4 A Linear Mixed Effects Model of Simulated Effect Size Data\nLet’s think about how we want to run a linear mixed-effects model of the data. For a varying-intercepts, varying-slopes model for each subject, we could run the following model with the lmer syntax as follows:\n\nEF ~ 1 + SpeechStyle + (1 | item_id) + (1 + SpeechStyle | subj_id)\n\nIn this model, EF is the effect size response variable; 1 corresponds to the average intercept; SpeechStyle is the predictor for the ADS/IDS manipulation for item i; (1 | item_id) specifies a by-subject random intercept (O_0i); (1 + SpeechStyle | subj_id) specifies a subject-specific random intercept (T_0s) plus the subject-specific random slope of SpeechStyle (T_1s). The error term (e_si) is automatically included in all models, so is left implicit in the above formula. The terms in parentheses with the “pipe” separator (|) define the random effects structure. For each of these bracketed terms, the left-hand side of the pipe names the effects you wish to allow to vary and the right hand side names the variable identifying the levels of the random factor over which the terms vary (e.g., subjects or items). The first term, (1 | item_id) allows the intercept (1) to vary over the random factor of items (item_id). This is an instruction to estimate the parameter underlying the O_0i values, namely omega_0. The second term, (1 + X_i | subj_id), allows both the intercept and the effect of category (coded by X_i) to vary over the random factor of subjects (subj_id). It is an instruction to estimate the three parameters that underlie the T_0s and T_1s values, namely tau_0, tau_1, and rho.\n\ndataSimulated &lt;- SimulateEffectSizeData()\n\nmodel &lt;- lmer(EF ~ 1 + SpeechStyle + (1 | item_id) + (1 + SpeechStyle |\n    subj_id), data = dataSimulated)\n\nsummary(model)\n\nLinear mixed model fit by REML. t-tests use Satterthwaite's method [\nlmerModLmerTest]\nFormula: EF ~ 1 + SpeechStyle + (1 | item_id) + (1 + SpeechStyle | subj_id)\n   Data: dataSimulated\n\nREML criterion at convergence: 191.3\n\nScaled residuals: \n     Min       1Q   Median       3Q      Max \n-2.92232 -0.63935 -0.01405  0.65895  2.81429 \n\nRandom effects:\n Groups   Name        Variance Std.Dev. Corr\n subj_id  (Intercept) 0.011522 0.10734      \n          SpeechStyle 0.006000 0.07746  0.98\n item_id  (Intercept) 0.005294 0.07276      \n Residual             0.082007 0.28637      \nNumber of obs: 384, groups:  subj_id, 24; item_id, 16\n\nFixed effects:\n            Estimate Std. Error       df t value Pr(&gt;|t|)    \n(Intercept) -0.02371    0.03961 20.33685  -0.599    0.556    \nSpeechStyle  0.41100    0.04927 14.95746   8.341 5.23e-07 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nCorrelation of Fixed Effects:\n            (Intr)\nSpeechStyle -0.385\n\n\nTry to run this a couple of times with new simulated data and see how the estimates and significance measures change. In the following code blocks, we will automatise this process and run the power analysis proper!",
    "crumbs": [
      "Part II, ModellingTheData"
    ]
  },
  {
    "objectID": "content/ModellingTheData.html#time-to-power-up-the-analysis",
    "href": "content/ModellingTheData.html#time-to-power-up-the-analysis",
    "title": "Part II, Modelling the Simulated Data",
    "section": "5 Time to Power-Up the Analysis",
    "text": "5 Time to Power-Up the Analysis\nNow we have two essential components to perform a simulation-based power analysis: i) a code pipeline to generate data for our research question and ii) a clear idea of how we want to model the data. Now it’s time to run the actual power analysis. The way we do this is to specify an effect, run 100s of models and count how many of the models show significant effects. To accomplish this, we can write a new function that combines a modelling component into our previous SimulateEffectSizeData() function. That is, if we include both the simulation and modelling of the data in one function, we can simplify the process of performing a power analysis. We will call this function SimulateAndModelEFData(), and we will use broom.mixed::tidy(model) to obtain a dataframe with relevant results from the model and write them to a .csv-file.\n\n# simulate, analyze, and return a table of parameter\n# estimates\nSimulateAndModelEFData &lt;- function(...) {\n    # simulate EF data function\n    dataSimulated &lt;- SimulateEffectSizeData()\n\n    # model EF data\n    model &lt;- lmer(EF ~ 1 + SpeechStyle + (1 | item_id) + (1 +\n        SpeechStyle | subj_id), data = dataSimulated)\n    # write to a dataframee\n    broom.mixed::tidy(model)\n}",
    "crumbs": [
      "Part II, ModellingTheData"
    ]
  },
  {
    "objectID": "content/ModellingTheData.html#running-the-power-analysis",
    "href": "content/ModellingTheData.html#running-the-power-analysis",
    "title": "Part II, Modelling the Simulated Data",
    "section": "6 Running the Power Analysis",
    "text": "6 Running the Power Analysis\nNow we have a function to generate data, run our model and spit out the results! Now it’s time to repeat a few hundred times, so that we can calculate how much power we have with our given parameters. We are going to use map_df() to run the simulation and modelling function 500 times and write it to a .csv file.\nIf it ran correctly, it should have produced a .csv file with model results from each new simulation of data. Let’s read in the results and have a look at what they say!\n\n# read saved simulation data\nsims &lt;- read_csv(\"EFsimulations.csv\", show_col_types = FALSE) %&gt;%\n    dplyr::select(term, estimate, std.error, p.value)\n\nsims %&gt;%\n    group_by(term) %&gt;%\n    dplyr::summarize(mean_estimate = mean(estimate), mean_se = mean(std.error),\n        power = mean(p.value &lt; 0.05), .groups = \"drop\")\n\n# A tibble: 6 × 4\n  term                         mean_estimate mean_se  power\n  &lt;chr&gt;                                &lt;dbl&gt;   &lt;dbl&gt;  &lt;dbl&gt;\n1 (Intercept)                        0.00207  0.0343  0.036\n2 SpeechStyle                        0.401    0.0454  1    \n3 cor__(Intercept).SpeechStyle      NA       NA      NA    \n4 sd__(Intercept)                    0.0677  NA      NA    \n5 sd__Observation                    0.299   NA      NA    \n6 sd__SpeechStyle                    0.102   NA      NA",
    "crumbs": [
      "Part II, ModellingTheData"
    ]
  },
  {
    "objectID": "content/ModellingTheData.html#exercises-to-check-understanding",
    "href": "content/ModellingTheData.html#exercises-to-check-understanding",
    "title": "Part II, Modelling the Simulated Data",
    "section": "7 Exercises to Check Understanding",
    "text": "7 Exercises to Check Understanding\n\n7.1 Exercise IV\nNow that we have this pipeline set up, it becomes easy to adapt the code to try out different parameter values. Let’s explore the effect of repeated measures on power. Try to run a power analysis with each subject receiving two items in each speech style. What happens to the estimate of statistical power?\n\n\nShow the code\n# read saved simulation data\nsims &lt;- read_csv(\"EFsimulations2Stimuli.csv\", show_col_types = FALSE) %&gt;%\n    dplyr::select(term, estimate, std.error, p.value)\n\nsims %&gt;%\n    group_by(term) %&gt;%\n    dplyr::summarize(mean_estimate = mean(estimate), mean_se = mean(std.error),\n        power = mean(p.value &lt; 0.05), .groups = \"drop\")\n\n\n# A tibble: 6 × 4\n  term                         mean_estimate mean_se  power\n  &lt;chr&gt;                                &lt;dbl&gt;   &lt;dbl&gt;  &lt;dbl&gt;\n1 (Intercept)                        0.00141  0.0622  0.046\n2 SpeechStyle                        0.398    0.0857  0.782\n3 cor__(Intercept).SpeechStyle      NA       NA      NA    \n4 sd__(Intercept)                    0.0735  NA      NA    \n5 sd__Observation                    0.291   NA      NA    \n6 sd__SpeechStyle                    0.136   NA      NA    \n\n\n\n\n7.2 Exercise V\nLet’s imagine a scenario where we are interested in the effect of age on IDS preference. We would like to explore the extent to which we can detect a cross-sectional age effect given only two stimulus items per participant. How would adapt the above code to explore this experimental design?\n\n\nShow the code\n# set up the custom data simulation function\nSimulateEFDataWithAge &lt;- function(\n  n_subj = 24,   # number of subjects\n  n_ADS  = 8,   # number of ingroup stimuli\n  n_IDS =  8,   # number of outgroup stimuli\n  beta_0 = 0,   # grand mean\n  beta_1 =  0.1,   # effect of category\n  beta_as = 0.4,\n  S_as = 0.2,\n  item_sd =  0.2,   # by-item random intercept sd\n  tau_0 = 0.1,   # by-subject random intercept sd\n  tau_1 =  0.1,   # by-subject random slope sd\n  rho = 0.2,   # correlation between intercept and slope\n  sigma = 0.3) { # residual (standard deviation)\n\n  items &lt;- data.frame(\n  #item_id = seq_len(n_ADS + n_IDS),\n  Register = rep(c(\"IDS\", \"ADS\"), c(n_ADS, n_IDS)),\n  O_0i = rnorm(n = n_ADS + n_IDS, mean = 0, sd = item_sd)) %&gt;% \n  mutate(item_id = faux::make_id(nrow(.), \"I\")) %&gt;%\n  mutate(SpeechStyle = recode(Register, \"ADS\" = 0, \"IDS\" = 1))\n\n  # simulate a sample of subjects\n\n# sample from a multivariate random distribution \n  subjects &lt;- faux::rnorm_multi(\n  n = n_subj, \n  mu = 0, # means for random effects are always 0\n  sd = c(tau_0, tau_1, S_as), # set SDs\n  r = rho, # set correlation, see ?faux::rnorm_multi\n  varnames = c(\"T_0s\", \"T_1s\", \"S_as\")\n) %&gt;%\n  mutate(subj_id = faux::make_id(nrow(.), \"S\")) %&gt;%\n  mutate(age_subj = runif(n_subj, min = -0.5, max = 0.5))\n\n  ParameterValues &lt;- crossing(subjects, items)  %&gt;%\n    mutate(e_si = rnorm(nrow(.), mean = 0, sd = sigma)) %&gt;%\n    dplyr::select(subj_id, item_id, Register, SpeechStyle, age_subj, S_as, everything())\n  \n  ParameterValues %&gt;%\n    mutate(EF = beta_0 + T_0s + O_0i + (beta_1 + T_1s) * SpeechStyle + ((beta_as + S_as) * age_subj * SpeechStyle) + e_si) %&gt;%\n    dplyr::select(subj_id, item_id, Register, SpeechStyle, age_subj, EF)\n}\n\nEFDataWithAgeSimulated &lt;- SimulateEFDataWithAge()\n\n\n\n\nShow the code\nEFDataWithAgeSimulated &lt;- SimulateEFDataWithAge()\nEFDataWithAgeSimulated %&gt;%\n    ggplot() + geom_point(aes(y = EF, x = age_subj, color = subj_id),\n    alpha = 0.6, size = 1, show.legend = F) + geom_smooth(method = \"lm\",\n    se = TRUE, formula = y ~ x, aes(y = EF, x = age_subj)) +\n    ggtitle(\"Age as Positive Interaction Effect\") + xlab(\"Age (standardised age)\") +\n    facet_wrap(~Register) + scale_color_manual(values = viridis(n = 27)) +\n    plot_theme\n\n\n\n\n\n\n\n\n\n\n\nShow the code\n# read saved simulation data\nsims &lt;- read_csv(\"EFsimulationsAge.csv\", show_col_types = FALSE) %&gt;%\n    dplyr::select(term, estimate, std.error, p.value)\n\nsims %&gt;%\n    group_by(term) %&gt;%\n    dplyr::summarize(mean_estimate = mean(estimate), mean_se = mean(std.error),\n        power = mean(p.value &lt; 0.05), .groups = \"drop\")\n\n\n# A tibble: 6 × 4\n  term                         mean_estimate mean_se  power\n  &lt;chr&gt;                                &lt;dbl&gt;   &lt;dbl&gt;  &lt;dbl&gt;\n1 (Intercept)                         0.0516  0.0786  0.09 \n2 SpeechStyle:age_subj                0.396   0.153   0.702\n3 cor__(Intercept).SpeechStyle       NA      NA      NA    \n4 sd__(Intercept)                     0.141  NA      NA    \n5 sd__Observation                     0.300  NA      NA    \n6 sd__SpeechStyle                     0.127  NA      NA    \n\n\nNow we have a pretty great pipeline set up that allows us to explore the effects of different parameter values on our ability to detect effects. However, instead of manually varying the parameters one by one, it would be nice if we could set up a grid search to explore values and put the power results into perspective. We will explore how to do this in the next exercise sheet. The code gets slightly more complepx, so make sure that you have understood the code that we have written so far before venturing further.",
    "crumbs": [
      "Part II, ModellingTheData"
    ]
  },
  {
    "objectID": "content/publishing.html",
    "href": "content/publishing.html",
    "title": "Publishing",
    "section": "",
    "text": "To get your Quarto webpage to show up with the url\nyou have a few steps."
  },
  {
    "objectID": "content/publishing.html#turn-on-github-pages-for-your-repo",
    "href": "content/publishing.html#turn-on-github-pages-for-your-repo",
    "title": "Publishing",
    "section": "1 Turn on GitHub Pages for your repo",
    "text": "1 Turn on GitHub Pages for your repo\n\nTurn on GitHub Pages under Settings &gt; Pages . You will set pages to be made from the gh-pages branch and the root directory.\nTurn on GitHub Actions under Settings &gt; Actions &gt; General\n\nThe GitHub Action will automatically recreate your website when you push to GitHub after you do the initial gh-pages set-up"
  },
  {
    "objectID": "content/publishing.html#do-your-first-publish-to-gh-pages",
    "href": "content/publishing.html#do-your-first-publish-to-gh-pages",
    "title": "Publishing",
    "section": "2 Do your first publish to gh-pages",
    "text": "2 Do your first publish to gh-pages\nThe first time you publish to gh-pages, you need to do so locally.\n\nOn your local computer, open a terminal window and cd to your repo directory. Here is what that cd command looks like for me. You command will look different because your local repo will be somewhere else on your computer.\n\ncd ~/Documents/GitHub/NOAA-quarto-simple\n\nPublish to the gh-pages. In the terminal type\n\nquarto publish gh-pages\nThis is going to render your webpage and then push the _site contents to the gh-pages branch."
  },
  {
    "objectID": "content/publishing.html#dont-like-using-gh-pages",
    "href": "content/publishing.html#dont-like-using-gh-pages",
    "title": "Publishing",
    "section": "3 Don’t like using gh-pages?",
    "text": "3 Don’t like using gh-pages?\nIn some cases, you don’t want your website on the gh-pages branch. For example, if you are creating releases and you want the website pages archived in that release, then you won’t want your website pages on the gh-pages branch.\nHere are the changes you need to make if you to avoid gh-pages branch.\n\nAt the top of _quarto.yml add the following:\n\nproject: \n  type: website\n  output-dir: docs\n\nOn GitHub under Settings &gt; Pages set pages to be made from the main branch and the docs directory.\nMake sure docs is not listed in .gitignore\nPublish the site the first time locally using quarto publish from the terminal\nChange the GitHub Action because you can’t use quarto publish gh-pages. You’ll need to push to the main branch yourself (in the GitHub Action)\n\non:\n  push:\n    branches: main\n\nname: Render and Publish\n\njobs:\n  build-deploy:\n    runs-on: ubuntu-latest\n    env:\n      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}\n\n    steps:\n      - name: Check out repository\n        uses: actions/checkout@v2 \n        \n      - name: Set up R (needed for Rmd)\n        uses: r-lib/actions/setup-r@v2\n\n      - name: Install packages (needed for Rmd)\n        run: Rscript -e 'install.packages(c(\"rmarkdown\", \"knitr\", \"jsonlite\"))'\n\n      - name: Set up Quarto\n        uses: quarto-dev/quarto-actions/setup@v2\n        with:\n          # To install LaTeX to build PDF book \n          # tinytex: true \n          # uncomment below and fill to pin a version\n          # version: 0.9.600\n      \n      - name: Render Quarto Project\n        uses: quarto-dev/quarto-actions/render@v2\n        with:\n          to: html\n\n      - name: Set up Git\n        run: |\n          git config --local user.email \"actions@github.com\"\n          git config --local user.name \"GitHub Actions\"\n\n      - name: Commit all changes and push\n        run: |\n          git add -A && git commit -m 'Build site' || echo \"No changes to commit\"\n          git push origin || echo \"No changes to commit\""
  },
  {
    "objectID": "content/ExerciseDataSimulation.html",
    "href": "content/ExerciseDataSimulation.html",
    "title": "Part I, Data Simulation",
    "section": "",
    "text": "In this first task, we will deal with a dependent variable that should be familiar to many researchers within developmental science: infant looking times. In our hypothetical study (modelled on ManyBabies1), infant participants are exposed to recordings of adult-directed speech (ADS) and infant-directed speech (IDS), and infants’ looking times to an unrelated visual stimulus is recorded as the primary dependent variable. The key question is whether there are any behavioural differences according to the set of stimuli (i.e., ADS vs. IDS) within each participant. To gain familiarity with the simulation process and to build up the structure for a simulation function that will help us when performing the power analysis in Part II, we will simulate data on the scale of looking times (i.e., 0-20,000ms). In the next section, we will extend this process to simulate effect size data.",
    "crumbs": [
      "Part I, Data Simulation"
    ]
  },
  {
    "objectID": "content/ExerciseDataSimulation.html#a-description-of-the-example-and-aim-of-the-simulation",
    "href": "content/ExerciseDataSimulation.html#a-description-of-the-example-and-aim-of-the-simulation",
    "title": "Part I, Data Simulation",
    "section": "",
    "text": "In this first task, we will deal with a dependent variable that should be familiar to many researchers within developmental science: infant looking times. In our hypothetical study (modelled on ManyBabies1), infant participants are exposed to recordings of adult-directed speech (ADS) and infant-directed speech (IDS), and infants’ looking times to an unrelated visual stimulus is recorded as the primary dependent variable. The key question is whether there are any behavioural differences according to the set of stimuli (i.e., ADS vs. IDS) within each participant. To gain familiarity with the simulation process and to build up the structure for a simulation function that will help us when performing the power analysis in Part II, we will simulate data on the scale of looking times (i.e., 0-20,000ms). In the next section, we will extend this process to simulate effect size data.",
    "crumbs": [
      "Part I, Data Simulation"
    ]
  },
  {
    "objectID": "content/ExerciseDataSimulation.html#determining-the-experimental-parameters",
    "href": "content/ExerciseDataSimulation.html#determining-the-experimental-parameters",
    "title": "Part I, Data Simulation",
    "section": "2 Determining the Experimental Parameters",
    "text": "2 Determining the Experimental Parameters\nBefore we can start to simulate data, we need to be very clear about the study design. This clarity is important because we need to explicitly define the parameters that we assume govern the process of data generation. If we are designing a similar study to that of ManyBabies1, then we are dealing with a within-subjects, between-items study; that is, each and every subject receives both ADS and IDS stimuli (within-subject), but each stimulus is either ADS or IDS (between-items).\nBecause infants are not the most patient of participants, perhaps a realistic study design would allow researchers to expose infants to 6 recordings of ADS and 6 recordings of IDS. And let’s say that a realistic sample size in our imaginary laboratory would be around 25 participants. This would imply a total of 300 observations in this study (i.e., 6 + 6 recording stimuli for each of the 25 children). Let’s set start by setting these experimental parameters.\n\n# set number of subjects and items\nn_subj &lt;- 25 # number of infant participants\nn_ADS  &lt;-  6 # number of ADS stimuli\nn_IDS  &lt;-  6 # number of IDS stimuli",
    "crumbs": [
      "Part I, Data Simulation"
    ]
  },
  {
    "objectID": "content/ExerciseDataSimulation.html#data-generating-parameters",
    "href": "content/ExerciseDataSimulation.html#data-generating-parameters",
    "title": "Part I, Data Simulation",
    "section": "3 Data Generating Parameters",
    "text": "3 Data Generating Parameters\nNow that we have an overview of the experimental design, we can start to consider a reasonable underlying statistical model. In the following sections, we will gradually build up the parameters for a mixed-effects statistical model of the following type, as described in the lecture:\n\\[\nLooking Time = \\beta^{ADS} + VaryingIntercept^{subj} + VaryingIntercept^{item} + (\\beta^{IDS} + VaryingSlope^{subj}) \\cdot SpeechStyle + \\varepsilon\n\\] According to this formula, the process of data generation means that our dependent variable of looking time is composed of a linear combination of the following fixed parameters: * the average ADS intercept capturing the mean baseline tendency to attend to ADS, ^{ADS} * the average influence of IDS on this baseline attention, ^{IDS}\nThere are also three varying effects: * a by-subject random intercept, VaryingIntercept^{subj} * a by-item random intercept, VaryingIntercept^{item} * a by-subject random slope, VaryingSlope^{subj}\nAnd lastly: * a trial-level residual error \nThis formula paves a clear way forward for our process of data simulation. In the next section, we will build up a statistical model step by step, defining variables in the code as we go along that reflect our choices for the different parameters.",
    "crumbs": [
      "Part I, Data Simulation"
    ]
  },
  {
    "objectID": "content/ExerciseDataSimulation.html#choosing-values-for-fixed-effect-parameters",
    "href": "content/ExerciseDataSimulation.html#choosing-values-for-fixed-effect-parameters",
    "title": "Part I, Data Simulation",
    "section": "4 Choosing Values for Fixed Effect Parameters",
    "text": "4 Choosing Values for Fixed Effect Parameters\nLet’s start by setting the fixed-effect parameters of SpeechStyle (β₀ + β₁*SpeechStyle). How should we set these parameters? A good place to start would be to be guided by what we know about looking time distributions in infant experiments. For example, we could imagine average infant looking times to be around 6 seconds (i.e., 6000ms) and for IDS stimuli to increase infant looking time by 1 second (i.e., 1000ms). Let’s go ahead and set these values as parameters in our simulation.\n\n# set fixed effect parameters\nmean_intercept &lt;- 6000  # intercept; i.e., the grand mean, β₀\nmean_slope &lt;- 1000  # slope; i.e, effect of IDS, β₁",
    "crumbs": [
      "Part I, Data Simulation"
    ]
  },
  {
    "objectID": "content/ExerciseDataSimulation.html#choosing-values-for-varying-intercept-parameters",
    "href": "content/ExerciseDataSimulation.html#choosing-values-for-varying-intercept-parameters",
    "title": "Part I, Data Simulation",
    "section": "5 Choosing Values for Varying Intercept Parameters",
    "text": "5 Choosing Values for Varying Intercept Parameters\nWhen we’re modelling data from experiments involving individuals (like infants in this case), it’s essential to account for the fact that each individual may have unique baseline reactions to the speech stimuli. Similarly, the effect of the stimuli on infant looking times might vary across different instances of the stimulus.\nTo address this, we introduce random intercept values for subjects and items by code the standard deviation of the random intercepts and sampling from a normal distribution. This reflects the range of differences we might observe among subjects’ reactions and the effects of different stimulus items.\n\n# set random effect parameters\nsubject_varyingintercept &lt;- 500  # by-subject random intercept sd\nitem_varyingintercept &lt;- 250  # by-item random intercept sd",
    "crumbs": [
      "Part I, Data Simulation"
    ]
  },
  {
    "objectID": "content/ExerciseDataSimulation.html#choosing-value-for-varying-slope-parameter",
    "href": "content/ExerciseDataSimulation.html#choosing-value-for-varying-slope-parameter",
    "title": "Part I, Data Simulation",
    "section": "6 Choosing Value for Varying Slope Parameter",
    "text": "6 Choosing Value for Varying Slope Parameter\nWe also need to acknowledge that the magnitude of the effect of IDS stimuli may vary across individual infants. Some infants might be more responsive to IDS stimuli than others, leading to variation in the differences in looking times across speech styles. We therefore introduce a slope parameter that varies by subject. When we introduce random slopes to a model, we need to consider potential correlations between these varying slopes and the varying intercepts. This is because if there is a correlation between the way individuals (infants, in this case) respond to the IDS stimuli (reflected in the varying slopes) and their baseline behaviors (reflected in the varying intercepts), it can affect our model’s predictions. For instance, if infants who naturally have longer attention spans (reflected in higher random intercepts) also tend to show stronger responses to IDS stimuli (reflected in steeper random slopes), ignoring this correlation might lead to biased estimates. Including a correlation matrix allows us to explicitly account for these potential correlations, ensuring that our model accurately captures the relationships between different sources of variability in the data and produces more reliable results. Hence, in the following code, we include a correlation matrix, specifying a weak correlation between the varying intercepts and varying slopes of infant participants. Lastly, we incorporate a residual error term to account for any unexplained sources of variability in the model.\n\n# set more random effect and error parameters\nsubject_varyingslope &lt;- 100  # by-subject random slope sd\nrho &lt;- 0.2  # correlation between intercept and slope\nsigma &lt;- 500  # residual (error) sd",
    "crumbs": [
      "Part I, Data Simulation"
    ]
  },
  {
    "objectID": "content/ExerciseDataSimulation.html#simulate-stimulus-items",
    "href": "content/ExerciseDataSimulation.html#simulate-stimulus-items",
    "title": "Part I, Data Simulation",
    "section": "7 Simulate Stimulus Items",
    "text": "7 Simulate Stimulus Items\nNow it’s time to create a dataset that lists, for each stimulus item, the speech style it is in and its varying properties on infants’ looking times. To set the parameter for varying item intercept, we are going to specify the standard deviation that we expect items to exhibit in the parameter, item_varyingintercept, in the below code. That is, we sample values from a normal distribution using the rnorm() function, with a meaan of 0 and standard deviation of item_varyingintercept. For the varying item variable, we also need to assign a unique identifer to each of the 16 speech stimuli and designate whether the stimuli are ADS or IDS, with the first 8 being ADS and the next 8 being IDS. We are going to use the faux package to carry this out.\n\n# simulate a sample of items\n# total number of items = n_ADS + n_IDS\nitems &lt;- data.frame(\n  #item_id = seq_len(n_ADS + n_IDS),\n  Register = rep(c(\"IDS\", \"ADS\"), c(n_ADS, n_IDS)),\n  item_intercept_sd = rnorm(n = n_ADS + n_IDS, mean = 0, sd = item_varyingintercept)\n) %&gt;% \n  mutate(SpeechStyle = recode(Register, \"ADS\" = 0, \"IDS\" = 1)) %&gt;% \n  mutate(item_id = faux::make_id(nrow(.), \"I\"))\n\nTo get to better grips with the simulation process, let’s visualise the data and take a look:\n\nglimpse(items)\n\nRows: 12\nColumns: 4\n$ Register          &lt;chr&gt; \"IDS\", \"IDS\", \"IDS\", \"IDS\", \"IDS\", \"IDS\", \"ADS\", \"AD…\n$ item_intercept_sd &lt;dbl&gt; -301.76644, 69.35731, 271.11029, -586.42443, 107.281…\n$ SpeechStyle       &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0\n$ item_id           &lt;chr&gt; \"I01\", \"I02\", \"I03\", \"I04\", \"I05\", \"I06\", \"I07\", \"I0…\n\nggplot(items, aes(1, item_intercept_sd, fill = Register, color = Register)) +\n    geom_rain(alpha = 0.8, boxplot.args = list(color = \"black\",\n        outlier.shape = NA)) + ggtitle(\"Varying Intercept Terms for Stimulus Item\") +\n    ylab(\"SD of Item Intercept (ms)\") + facet_wrap(~Register) +\n    scale_fill_brewer(palette = \"Dark2\") + scale_color_brewer(palette = \"Dark2\") +\n    plot_theme + theme(axis.title.x = element_blank(), axis.text.x = element_blank(),\n    axis.ticks.x = element_blank())",
    "crumbs": [
      "Part I, Data Simulation"
    ]
  },
  {
    "objectID": "content/ExerciseDataSimulation.html#simulate-the-sampling-of-subjects",
    "href": "content/ExerciseDataSimulation.html#simulate-the-sampling-of-subjects",
    "title": "Part I, Data Simulation",
    "section": "8 Simulate the sampling of subjects",
    "text": "8 Simulate the sampling of subjects\nThe process of simulating varying intercepts varying slopes data for subjects is slightly more complex than that of items. This process is slightly more complex than before because we cannot simply sample the intercept values independently from the slope values using rnorm(). Instead, we need to sample pairs of values for each subject from a bivariate normal distribution. We will use the rnorm_multi() function from the faux package (DeBruine 2020) to carry this out. This function allows us to specify the means, and standard deviations (sd) for each variable, along with the correlations (r), which in this case will be a single value applied to all pairs.\n\n# simulate a sample of subjects\n# sample from a multivariate random distribution \nsubjects &lt;- faux::rnorm_multi(\n  n = n_subj, \n  mu = 0, # means for random effects are always 0\n  sd = c(subject_varyingintercept, subject_varyingslope), # note that we set the SDs further up in the code when specifying varying intercepts and sloeps.\n  r = rho, # set correlation, see ?faux::rnorm_multi\n  varnames = c(\"subject_intercept_sd\", \"subject_slope_sd\")\n) %&gt;%\n  mutate(subj_id = faux::make_id(nrow(.), \"S\")) # add subject ids that correspond to the number of rows simulated.\n\nAgain, let’s visualise this process, so that we are sure what the code is doing.\n\nglimpse(subjects)\n\nRows: 25\nColumns: 3\n$ subject_intercept_sd &lt;dbl&gt; 382.658246, -33.425681, -481.626658, 61.038220, 2…\n$ subject_slope_sd     &lt;dbl&gt; 147.31082, 27.44542, 25.61690, -139.48689, 115.15…\n$ subj_id              &lt;chr&gt; \"S01\", \"S02\", \"S03\", \"S04\", \"S05\", \"S06\", \"S07\", …\n\nsubjects %&gt;%\n    pivot_longer(cols = starts_with(\"subject\"), names_to = \"parameters\",\n        values_to = \"value\") %&gt;%\n    ggplot() + geom_density(aes(value, fill = parameters), alpha = 0.8) +\n    xlim(c(-4 * subject_varyingintercept, 4 * subject_varyingintercept)) +\n    facet_wrap(~parameters) + ggtitle(\"Varying Intercept and Slope Terms for Subjects\") +\n    plot_theme + scale_fill_brewer(palette = \"Dark2\") + theme(axis.title.y = element_blank(),\n    axis.text.y = element_blank(), axis.ticks.y = element_blank())",
    "crumbs": [
      "Part I, Data Simulation"
    ]
  },
  {
    "objectID": "content/ExerciseDataSimulation.html#time-to-put-it-all-together",
    "href": "content/ExerciseDataSimulation.html#time-to-put-it-all-together",
    "title": "Part I, Data Simulation",
    "section": "9 Time to Put It All Together",
    "text": "9 Time to Put It All Together\nBecause all subjects respond to all stimulus items, we can create a dataset with every possible combination of the rows in the simulated subject and item datasets. For this we use the tidyverse function crossing(). To introduce inherent fluctuations in trial-by-trial performance, we also incorporate random error into each trial at this stage, based on our sigma value (specified above). The output of this approach means that our dataset captures the full range of subject-item interactions while accounting for unpredictable variations in individual performance across trials.\n\n# cross subject and item IDs; add an error term\nParameterValues &lt;- crossing(subjects, items) %&gt;%\n    mutate(e_si = rnorm(nrow(.), mean = 0, sd = sigma))\n\nglimpse(ParameterValues)\n\nRows: 300\nColumns: 8\n$ subject_intercept_sd &lt;dbl&gt; -1211.9231, -1211.9231, -1211.9231, -1211.9231, -…\n$ subject_slope_sd     &lt;dbl&gt; 47.01883, 47.01883, 47.01883, 47.01883, 47.01883,…\n$ subj_id              &lt;chr&gt; \"S08\", \"S08\", \"S08\", \"S08\", \"S08\", \"S08\", \"S08\", …\n$ Register             &lt;chr&gt; \"ADS\", \"ADS\", \"ADS\", \"ADS\", \"ADS\", \"ADS\", \"IDS\", …\n$ item_intercept_sd    &lt;dbl&gt; -249.59661, -222.50946, -143.68499, -141.11300, -…\n$ SpeechStyle          &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0…\n$ item_id              &lt;chr&gt; \"I12\", \"I10\", \"I07\", \"I09\", \"I08\", \"I11\", \"I04\", …\n$ e_si                 &lt;dbl&gt; -17.380195, -334.816790, -3.802378, 888.542224, -…\n\n\nNow we have specified the parameters in ParameterValues, we are ready to add up everything together to create the response variable (i.e., infant looking times in milliseconds). To be more specific, we calculate the response variable, looking time, by adding together the variables.\n\n# calculate the response variable\nSimulatedLT &lt;- ParameterValues %&gt;%\n  mutate(LT = mean_intercept + subject_intercept_sd + item_intercept_sd + (mean_slope + subject_slope_sd) * SpeechStyle + e_si) %&gt;% #sum together overall intercept, varying subject and item intercepts, varying subject slopes, and random error.\n  mutate(LT = LT + rexp(nrow(.), rate = 0.01)) %&gt;% #add a long tail to the distribution to simulate exgaussian distribution of looking times\n  dplyr::select(subj_id, item_id, Register, SpeechStyle, LT)\n\nLet’s have a look at what the data we have generated looks like:\n\n# Plot of how overall looking time distributions differ\n# across ADS and IDS\nSimulatedLT %&gt;%\n    ggplot() + geom_density(aes(LT, fill = Register), alpha = 0.8) +\n    xlim(c(2400, 18000)) + ggtitle(\"Varying Intercept and Slope Terms for Subjects\") +\n    plot_theme + scale_fill_brewer(palette = \"Dark2\") + theme(axis.title.y = element_blank(),\n    axis.text.y = element_blank(), axis.ticks.y = element_blank())\n\n\n\n\n\n\n\n# Plot of how looking times of indvidual subjects differ\n# across the two speech style\nSimulatedLT %&gt;%\n    group_by(subj_id, Register) %&gt;%\n    dplyr::summarise(medLT = mean(LT), .groups = \"drop\") %&gt;%\n    ggplot(aes(x = Register, y = medLT, fill = Register)) + geom_rain(alpha = 0.8,\n    rain.side = \"f1x1\", id.long.var = \"subj_id\", point.args.pos = list(position = position_jitter(width = 0.04,\n        height = 0, seed = 42)), line.args.pos = list(position = position_jitter(width = 0.04,\n        height = 0, seed = 42))) + scale_fill_brewer(palette = \"Dark2\") +\n    ggtitle(\"Individual Subject Looking Times across Speech Styles\") +\n    xlab(\"Speech Style\") + ylab(\"Looking Time (ms)\") + scale_color_manual(values = viridis(n = 27)) +\n    plot_theme",
    "crumbs": [
      "Part I, Data Simulation"
    ]
  },
  {
    "objectID": "content/ExerciseDataSimulation.html#with-the-initial-setup-done-lets-automatise-with-a-function",
    "href": "content/ExerciseDataSimulation.html#with-the-initial-setup-done-lets-automatise-with-a-function",
    "title": "Part I, Data Simulation",
    "section": "10 With the Initial Setup Done, Let’s Automatise with a Function!",
    "text": "10 With the Initial Setup Done, Let’s Automatise with a Function!\nNow that we’ve simulated a dataset with the necessary properties, suitable for sophisticated linear mixed effects models, we can streamline the process by encapsulating all the preceding code into a custom function. This function will accept the parameters we defined earlier as arguments, with default values set to our chosen parameters.\n\n# set up the custom data simulation function\nSimulateLTData &lt;- function(\n  n_subj = 24,   # number of subjects\n  n_ADS  = 6,   # number of ingroup stimuli\n  n_IDS =  6,   # number of outgroup stimuli\n  mean_intercept = 6000,   # grand mean\n  mean_slope =  1000,   # effect of category\n  item_varyingintercept =  250,   # by-item random intercept sd\n  subject_varyingintercept = 500,   # by-subject random intercept sd\n  subject_varyingslope =  100,   # by-subject random slope sd\n  rho = 0.2,   # correlation between intercept and slope\n  sigma = 500) { # residual (standard deviation)\n\n  items &lt;- data.frame(\n  #item_id = seq_len(n_ADS + n_IDS),\n  Register = rep(c(\"IDS\", \"ADS\"), c(n_ADS, n_IDS)),\n  item_intercept_sd = rnorm(n = n_ADS + n_IDS, mean = 0, sd = item_varyingintercept)\n) %&gt;% \n  mutate(SpeechStyle = recode(Register, \"ADS\" = 0, \"IDS\" = 1)) %&gt;% \n  mutate(item_id = faux::make_id(nrow(.), \"I\"))\n\n  # simulate a sample of subjects\n\n# sample from a multivariate random distribution \n  subjects &lt;- faux::rnorm_multi(\n  n = n_subj, \n  mu = 0, \n  sd = c(subject_varyingintercept, subject_varyingslope), \n  r = rho,\n  varnames = c(\"subject_intercept_sd\", \"subject_slope_sd\")\n) %&gt;%\n  mutate(subj_id = faux::make_id(nrow(.), \"S\"))\n\n  ParameterValues &lt;- crossing(subjects, items)  %&gt;%\n    mutate(e_si = rnorm(nrow(.), mean = 0, sd = sigma))\n  \n  # calculate the response variable\n  SimulatedLT &lt;- ParameterValues %&gt;%\n    mutate(LT = mean_intercept + subject_intercept_sd + item_intercept_sd + (mean_slope + subject_slope_sd) * SpeechStyle + e_si) %&gt;% #sum together overall intercept, varying subject and item intercepts, varying subject slopes, and random error.\n  mutate(LT = LT + rexp(nrow(.), rate = 0.01)) %&gt;% #add a long tail to the distribution to simulate exgaussian distribution of looking times\n  dplyr::select(subj_id, item_id, Register, SpeechStyle, LT)\n}\n\nHaving condense all the preceding steps into a single function and returning a dataset with the specified parameters, we are now empowered to effortlessly experiment with different parameters or generate multiple datasets for power analysis purposes.\nFor example, we can easily generate a dataset with the effect of IDS being 5000ms instead of only 1000ms by specifying the following\n\nSimulatedDataWithIDSslopeOf3000 &lt;- SimulateLTData(mean_slope = 3000)\n\n# Plot of how looking times of indvidual subjects differ\n# across the two speech style\nSimulatedDataWithIDSslopeOf3000 %&gt;%\n    group_by(subj_id, Register) %&gt;%\n    dplyr::summarise(medLT = mean(LT), .groups = \"drop\") %&gt;%\n    ggplot(aes(x = Register, y = medLT, fill = Register)) + geom_rain(alpha = 0.8,\n    rain.side = \"f1x1\", id.long.var = \"subj_id\", point.args.pos = list(position = position_jitter(width = 0.04,\n        height = 0, seed = 42)), line.args.pos = list(position = position_jitter(width = 0.04,\n        height = 0, seed = 42))) + scale_fill_brewer(palette = \"Dark2\") +\n    ggtitle(\"Individual Subject Looking Times across Speech Styles\") +\n    xlab(\"Speech Style\") + ylab(\"Looking Time (ms)\") + scale_color_manual(values = viridis(n = 27)) +\n    plot_theme\n\nWarning: Duplicated aesthetics after name standardisation: alpha",
    "crumbs": [
      "Part I, Data Simulation"
    ]
  },
  {
    "objectID": "content/ExerciseDataSimulation.html#exercises-to-check-understanding",
    "href": "content/ExerciseDataSimulation.html#exercises-to-check-understanding",
    "title": "Part I, Data Simulation",
    "section": "11 Exercises to Check Understanding",
    "text": "11 Exercises to Check Understanding\n\n11.1 Exercise I\n\nHow would you adapt the above code to generate a dataset with 500 participants and no effect of SpeechStyle (i.e., distributions similar to the below plot)? Try to get inspiration from the below plot, code up a solution, and only then click on “Show the code” to check how you might approach this.\n\n\n\nShow the code\n# With our new SimulateLTData() function, the answer here\n# is fairly straightforward! We can simply specify that we\n# want to simulate 500 subjects and want a mean slope of 0,\n# like so: SimulateLTData(n_subj = 500, mean_slope = 0).\n\nLTDataSimulated &lt;- SimulateLTData(n_subj = 500, mean_slope = 0)\n\nLTDataSimulated %&gt;%\n    group_by(subj_id, Register) %&gt;%\n    dplyr::summarise(medLT = mean(LT), .groups = \"drop\") %&gt;%\n    ggplot(aes(x = Register, y = medLT, fill = Register)) + geom_rain(alpha = 0.8,\n    rain.side = \"f1x1\", id.long.var = \"subj_id\", point.args.pos = list(position = position_jitter(width = 0.04,\n        height = 0, seed = 42)), line.args.pos = list(position = position_jitter(width = 0.04,\n        height = 0, seed = 42))) + scale_fill_brewer(palette = \"Dark2\") +\n    ggtitle(\"Looking Time Differences across Speech Styles\") +\n    xlab(\"Speech Style\") + ylab(\"Looking Time (ms)\") + scale_color_manual(values = viridis(n = 27)) +\n    plot_theme\n\n\n\n\n\n\n\n\n\n\n\n11.2 Exercise II\n\nWe might expect the IDS preference effect to change with infant age, such that older infants display longer looking times to IDS over ADS. How would you add a positive interaction effect of (cross-sectional) age as a predictor to the model (hint: it involves randomly sampling age for each child and adding an effect to the simulation code and model)? Try to think through the problem, get inspiration from the below plot, code up a solution, and only then click on “Show the code” to check how you might approach this.\n\n\n\nShow the code\n#The question here involves adding infant age as an interaction effect with SpeechStyle. We will approach this question by modifying the code that simulates subject-level data. Here, we will sample an age variable and pretend that we have standardised age so that its values fall between -0.5 and 0.5. We thus randomly sample age to assign one age to each subject. We also need to specify a slope value for the influence of subject age and place it in the start of the function; we will add subject_age = 200. Lastly, we need to change how we sum the values together, so that age has an effect on looking times, but also that the influence of age exerts different effects across the two speech styles.\n\nSimulateLTDataWithAge &lt;- function(\n  beta_age = 1000, #add effect of age\n  age_interaction_sd = 150, #add some standard deviation to aage effect\n  n_subj = 24,   # number of subjects\n  n_ADS  = 6,   # number of ingroup stimuli\n  n_IDS =  6,   # number of outgroup stimuli\n  mean_intercept = 6000,   # grand mean\n  mean_slope =  1000,   # effect of category\n  item_varyingintercept =  250,   # by-item random intercept sd\n  subject_varyingintercept = 500,   # by-subject random intercept sd\n  subject_varyingslope =  100,   # by-subject random slope sd\n  rho = 0.2,   # correlation between intercept and slope\n  sigma = 500) { # residual (standard deviation)\n\n  items &lt;- data.frame(\n  #item_id = seq_len(n_ADS + n_IDS),\n  Register = rep(c(\"IDS\", \"ADS\"), c(n_ADS, n_IDS)),\n  item_intercept_sd = rnorm(n = n_ADS + n_IDS, mean = 0, sd = item_varyingintercept)\n) %&gt;% \n  mutate(SpeechStyle = recode(Register, \"ADS\" = 0, \"IDS\" = 1)) %&gt;% \n  mutate(item_id = faux::make_id(nrow(.), \"I\"))\n\n  # simulate a sample of subjects\n\n# sample from a multivariate random distribution \n  subjects &lt;- faux::rnorm_multi(\n  n = n_subj, \n  mu = 0, \n  sd = c(subject_varyingintercept, subject_varyingslope, age_interaction_sd), \n  r = rho,\n  varnames = c(\"subject_intercept_sd\", \"subject_slope_sd\", \"age_slope_sd\")\n) %&gt;%\n    mutate(subj_id = faux::make_id(nrow(.), \"S\")) %&gt;%\n    mutate(age_subj = runif(n_subj, min = -0.5, max = 0.5))\n\n  ParameterValues &lt;- crossing(subjects, items)  %&gt;%\n    mutate(e_si = rnorm(nrow(.), mean = 0, sd = sigma))\n  \n  # calculate the response variable\n  SimulatedLT &lt;- ParameterValues %&gt;%\n    mutate(LT = mean_intercept + subject_intercept_sd + item_intercept_sd + (mean_slope + subject_slope_sd) * SpeechStyle + ((beta_age + age_slope_sd) * age_subj * SpeechStyle) + e_si) %&gt;%\n    \n  mutate(LT = LT + rexp(nrow(.), rate = 0.01)) %&gt;% #add a long tail to the distribution to simulate exgaussian distribution of looking times\n  dplyr::select(subj_id, item_id, Register, SpeechStyle, age_subj, LT)\n}\n\nDataWithAgeSimulated &lt;- SimulateLTDataWithAge()\nDataWithAgeSimulated %&gt;%\nggplot() + \n  geom_point(aes(y = LT, x = age_subj, color = subj_id), alpha = 0.6, size = 1, show.legend = F) + \n  geom_smooth(method = \"lm\", se = TRUE, formula = y ~ x, aes(y = LT, x = age_subj)) +\n  ggtitle(\"Interaction Effect with Age\") +\n  xlab(\"Age (standardised age)\") + \n  facet_wrap(~Register) +\n  scale_color_manual(values = viridis(n = 27)) +\n  plot_theme\n\n\n\n\n\n\n\n\n\n\n\n11.3 Exercise III\n\nWe made the simplifying assumption that each and every stimulus item evokes exactly the same response in participants; however, certain items might elicit stronger or weaker responses depending on individual differences or contextual factors. Including varying slopes for stimulus items may help us capture this variation more accurately (if the model can converge). How could we modify the above code to include varying slopes according stimulus items? Again, try to think through the problem, get inspiration from the below plot, code up a solution, and only then click on “Show the code” to check how you might approach this.\n\n\n\nShow the code\nSimulateLTData &lt;- function(\n  item_varyingslope =  100,   # by-subject random slope sd\n  n_subj = 24,   # number of subjects\n  n_ADS  = 6,   # number of ingroup stimuli\n  n_IDS =  6,   # number of outgroup stimuli\n  mean_intercept = 6000,   # grand mean\n  mean_slope =  1000,   # effect of category\n  item_varyingintercept =  250,   # by-item random intercept sd\n  subject_varyingintercept = 500,   # by-subject random intercept sd\n  subject_varyingslope =  100,   # by-subject random slope sd\n  rho = 0.2,   # correlation between intercept and slope\n  sigma = 500) { # residual (standard deviation)\n\n  \n  items &lt;- data.frame(\n  #item_id = seq_len(n_ADS + n_IDS),\n  Register = rep(c(\"IDS\", \"ADS\"), c(n_ADS, n_IDS)),\n  faux::rnorm_multi(\n  n = n_ADS + n_IDS, \n  mu = 0, # means for random effects are always 0\n  sd = c(item_varyingintercept, item_varyingslope),\n  r = rho,\n  varnames = c(\"item_varyingintercept\", \"item_slope_sd\"))) %&gt;%\n    mutate(item_id = faux::make_id(n_ADS + n_IDS, \"I\")) %&gt;%\n    mutate(SpeechStyle = recode(Register, \"ADS\" = 0, \"IDS\" = 1))\n\n  # simulate a sample of subjects\n\n# sample from a multivariate random distribution \n  subjects &lt;- faux::rnorm_multi(\n  n = n_subj, \n  mu = 0, \n  sd = c(subject_varyingintercept, subject_varyingslope), \n  r = rho,\n  varnames = c(\"subject_intercept_sd\", \"subject_slope_sd\")\n) %&gt;%\n  mutate(subj_id = faux::make_id(nrow(.), \"S\"))\n\n  ParameterValues &lt;- crossing(subjects, items)  %&gt;%\n    mutate(e_si = rnorm(nrow(.), mean = 0, sd = sigma))\n  \n  # calculate the response variable\n  SimulatedLT &lt;- ParameterValues %&gt;%\n    mutate(LT = mean_intercept + subject_intercept_sd + item_varyingintercept + (mean_slope + subject_slope_sd + item_slope_sd) * SpeechStyle + e_si) %&gt;% #sum together overall intercept, varying subject and item intercepts, varying subject slopes, and random error.\n  mutate(LT = LT + rexp(nrow(.), rate = 0.01)) %&gt;% #add a long tail to the distribution to simulate exgaussian distribution of looking times\n  dplyr::select(subj_id, item_id, Register, SpeechStyle, LT)\n}\n\n\nDataWithAgeSimulated &lt;- SimulateLTData()\nLTDataSimulated %&gt;%\n  group_by(item_id, Register) %&gt;%\n  dplyr::summarise(medLT = mean(LT), .groups = 'drop') %&gt;%\n  ggplot(aes(x = Register, y = medLT, fill = Register)) + \n  geom_rain(alpha = 0.8, rain.side = \"f1x1\", id.long.var = \"item_id\", point.args.pos = list(position = position_jitter(width = 0.04, height = 0, seed = 42)), line.args.pos = list(position = position_jitter(width = 0.04, height = 0, seed = 42))) + \n  scale_fill_brewer(palette = 'Dark2') +\n  ggtitle('Looking Time Differences across Speech Styles') + \n  xlab(\"Speech Style\") + \n  ylab('Looking Time (ms)') + \n  scale_color_manual(values = viridis(n = 27)) +\n  plot_theme\n\n\n`geom_line()`: Each group consists of only one observation.\nℹ Do you need to adjust the group aesthetic?\n\n\n\n\n\n\n\n\n\nShow the code\n# set up the custom data simulation function\nSimulateLTDataWithAge &lt;- function(\n  n_subj = 24,   # number of subjects\n  n_ADS  = 8,   # number of ingroup stimuli\n  n_IDS =  8,   # number of outgroup stimuli\n  beta_0 = 7000,   # grand mean\n  beta_1 =  2000,   # effect of category\n  beta_as = 5000,\n  S_as = 200,\n  item_sd =  200,   # by-item random intercept sd\n  item_slope_sd =  200,   # by-item random slope sd\n  tau_0 = 2000,   # by-subject random intercept sd\n  tau_1 =  1000,   # by-subject random slope sd\n  rho = 0.2,   # correlation between intercept and slope\n  sigma = 500) { # residual (standard deviation)\n\n  items &lt;- data.frame(\n  #item_id = seq_len(n_ADS + n_IDS),\n  Register = rep(c(\"IDS\", \"ADS\"), c(n_ADS, n_IDS)),\n  faux::rnorm_multi(\n  n = n_ADS + n_IDS, \n  mu = 0, # means for random effects are always 0\n  sd = c(item_sd, item_slope_sd),\n  r = rho,\n  varnames = c(\"item_sd\", \"item_slope_sd\"))) %&gt;%\n    mutate(item_id = faux::make_id(n_ADS + n_IDS, \"I\")) %&gt;%\n    mutate(SpeechStyle = recode(Register, \"ADS\" = 0, \"IDS\" = 1))\n\n  # simulate a sample of subjects\n\n# sample from a multivariate random distribution \n  subjects &lt;- faux::rnorm_multi(\n  n = n_subj, \n  mu = 0, # means for random effects are always 0\n  sd = c(tau_0, tau_1, S_as), # set SDs\n  r = rho, # set correlation, see ?faux::rnorm_multi\n  varnames = c(\"T_0s\", \"T_1s\", \"S_as\")\n) %&gt;%\n  mutate(subj_id = faux::make_id(nrow(.), \"S\")) %&gt;%\n  mutate(age_subj = runif(n_subj, min = -0.5, max = 0.5))\n\n  ParameterValues &lt;- crossing(subjects, items)  %&gt;%\n    mutate(e_si = rnorm(nrow(.), mean = 0, sd = sigma)) %&gt;%\n    dplyr::select(subj_id, item_id, Register, SpeechStyle, age_subj, S_as, everything())\n  \n  ParameterValues %&gt;%\n    mutate(LT = beta_0 + T_0s + item_sd + (beta_1 + T_1s) * SpeechStyle + ((beta_as + S_as) * age_subj * SpeechStyle) + (beta_1 + item_slope_sd) * SpeechStyle + e_si) %&gt;%\n    mutate(LT = LT + rexp(nrow(.), rate = 0.0003)) %&gt;%\n    dplyr::select(subj_id, item_id, Register, SpeechStyle, age_subj, LT)\n}",
    "crumbs": [
      "Part I, Data Simulation"
    ]
  },
  {
    "objectID": "content/rmarkdown.html",
    "href": "content/rmarkdown.html",
    "title": "R Markdown",
    "section": "",
    "text": "You can include R Markdown files in your project."
  },
  {
    "objectID": "content/rmarkdown.html#r-markdown",
    "href": "content/rmarkdown.html#r-markdown",
    "title": "R Markdown",
    "section": "1 R Markdown",
    "text": "1 R Markdown\nThis is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see http://rmarkdown.rstudio.com.\nWhen you click the Knit button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:\n\nsummary(cars)\n\n     speed           dist       \n Min.   : 4.0   Min.   :  2.00  \n 1st Qu.:12.0   1st Qu.: 26.00  \n Median :15.0   Median : 36.00  \n Mean   :15.4   Mean   : 42.98  \n 3rd Qu.:19.0   3rd Qu.: 56.00  \n Max.   :25.0   Max.   :120.00"
  },
  {
    "objectID": "content/rmarkdown.html#including-plots",
    "href": "content/rmarkdown.html#including-plots",
    "title": "R Markdown",
    "section": "2 Including Plots",
    "text": "2 Including Plots\nYou can also embed plots, for example:\n\n\n\n\n\n\n\n\n\nNote that the echo = FALSE parameter was added to the code chunk to prevent printing of the R code that generated the plot."
  },
  {
    "objectID": "content/GridSearch.html",
    "href": "content/GridSearch.html",
    "title": "Grid Searches and Sensitivity Analyses",
    "section": "",
    "text": "It should be clear from the previous sections that the data simulation process involves a multiverse of experimenter choices. One way to explore (and calm our fears about) the respective importance of these individual choices and their interactions would be to conduct a sensitivity analysis with a grid search of all available combinations among parameter values of interest. To do this, we can wrap our Simulation and Modelling function with a higher-level function that inputs a series of parameter combinations that we are interested in exploring further. Here is a suggestion for a function of this type. We can start by creating a matrix of parameter combinations that we are interested in.\n\nsubj_n &lt;- seq(2, 50, by = 3)\ntrial_n &lt;- seq(4, 8, by = 2)\nNumberOfModels &lt;- 500\n\nparam_combinations &lt;- expand.grid(subj_n = subj_n, trial_n = trial_n)\n\n\nrun_sims_grid_point &lt;- function(filename_full, trial_n, subj_n) {\n    ADS_n = trial_n/2\n    IDS_n = trial_n/2\n    n_subj = subj_n\n\n    dataSimulated &lt;- SimulateEffectSizeData(n_subj = n_subj,\n        n_ADS = ADS_n, n_IDS = IDS_n)\n\n    model &lt;- lmer(EF ~ 1 + SpeechStyle + (1 | item_id) + (1 +\n        SpeechStyle | subj_id), data = dataSimulated)\n\n    sim_results &lt;- broom.mixed::tidy(model)\n\n    # append the results to a file\n    append &lt;- file.exists(filename_full)\n    write_csv(sim_results, filename_full, append = append)\n\n    # return the tidy table\n    sim_results\n}\n\n\nfor (i in seq_len(nrow(param_combinations))) {\n    sim_params &lt;- param_combinations[i, ]\n    filename_full &lt;- paste0(here(\"sims_grid_search/test_grid_search_\"),\n        sim_params$subj_n, \"_\", sim_params$trial_n, \".csv\")\n    start_time &lt;- Sys.time()  # Start time\n    sims &lt;- purrr::map_df(1:NumberOfModels, ~run_sims_grid_point(filename_full = filename_full,\n        subj_n = sim_params$subj_n, trial_n = sim_params$trial_n))\n    end_time &lt;- Sys.time()  # End time\n    cat(\"Simulation\", i, \"Time elapsed:\", end_time - start_time,\n        \"\\n\")\n}\n\n\nsetwd(here(\"sims_grid_search\"))\nfile_names &lt;- list.files(pattern = \"*.csv\")\n\n# read in all CSV files into a list of dataframes\ndf_list &lt;- purrr::map(file_names, ~{\n    df &lt;- read.csv(.x)\n    df$filename &lt;- .x\n    df\n})\n\ndf &lt;- purrr::reduce(df_list, dplyr::bind_rows)\n\ndf_per_sim &lt;- df %&gt;%\n    filter(effect == \"fixed\") %&gt;%\n    filter(term == \"SpeechStyle\") %&gt;%\n    group_by(filename) %&gt;%\n    summarise(median_estimate = median(estimate), median_se = median(std.error),\n        power = mean(p.value &lt; 0.05))\n\nPowerGridData &lt;- df_per_sim %&gt;%\n    mutate(n_subj = as.numeric(sapply(strsplit(filename, \"_\"),\n        `[`, 4)), n_trial = as.factor(str_replace(sapply(strsplit(filename,\n        \"_\"), `[`, 5), pattern = \".csv\", \"\")))\n\nggplot(PowerGridData) + geom_point(aes(x = n_subj, y = power,\n    color = n_trial)) + geom_line(aes(x = n_subj, y = power,\n    color = n_trial)) + geom_hline(yintercept = 0.8, linetype = 3) +\n    xlab(\"Sample Size\") + ylab(\"Statistical Power\") + ggtitle(\"Interaction among Number of Subjects & Repeated Measures\") +\n    scale_color_brewer(palette = \"Dark2\") + plot_theme",
    "crumbs": [
      "Part III, Grid Searches and Sensitivity Analyses"
    ]
  },
  {
    "objectID": "content/GridSearch.html#using-grid-searches-to-explore-the-multiverse",
    "href": "content/GridSearch.html#using-grid-searches-to-explore-the-multiverse",
    "title": "Grid Searches and Sensitivity Analyses",
    "section": "",
    "text": "It should be clear from the previous sections that the data simulation process involves a multiverse of experimenter choices. One way to explore (and calm our fears about) the respective importance of these individual choices and their interactions would be to conduct a sensitivity analysis with a grid search of all available combinations among parameter values of interest. To do this, we can wrap our Simulation and Modelling function with a higher-level function that inputs a series of parameter combinations that we are interested in exploring further. Here is a suggestion for a function of this type. We can start by creating a matrix of parameter combinations that we are interested in.\n\nsubj_n &lt;- seq(2, 50, by = 3)\ntrial_n &lt;- seq(4, 8, by = 2)\nNumberOfModels &lt;- 500\n\nparam_combinations &lt;- expand.grid(subj_n = subj_n, trial_n = trial_n)\n\n\nrun_sims_grid_point &lt;- function(filename_full, trial_n, subj_n) {\n    ADS_n = trial_n/2\n    IDS_n = trial_n/2\n    n_subj = subj_n\n\n    dataSimulated &lt;- SimulateEffectSizeData(n_subj = n_subj,\n        n_ADS = ADS_n, n_IDS = IDS_n)\n\n    model &lt;- lmer(EF ~ 1 + SpeechStyle + (1 | item_id) + (1 +\n        SpeechStyle | subj_id), data = dataSimulated)\n\n    sim_results &lt;- broom.mixed::tidy(model)\n\n    # append the results to a file\n    append &lt;- file.exists(filename_full)\n    write_csv(sim_results, filename_full, append = append)\n\n    # return the tidy table\n    sim_results\n}\n\n\nfor (i in seq_len(nrow(param_combinations))) {\n    sim_params &lt;- param_combinations[i, ]\n    filename_full &lt;- paste0(here(\"sims_grid_search/test_grid_search_\"),\n        sim_params$subj_n, \"_\", sim_params$trial_n, \".csv\")\n    start_time &lt;- Sys.time()  # Start time\n    sims &lt;- purrr::map_df(1:NumberOfModels, ~run_sims_grid_point(filename_full = filename_full,\n        subj_n = sim_params$subj_n, trial_n = sim_params$trial_n))\n    end_time &lt;- Sys.time()  # End time\n    cat(\"Simulation\", i, \"Time elapsed:\", end_time - start_time,\n        \"\\n\")\n}\n\n\nsetwd(here(\"sims_grid_search\"))\nfile_names &lt;- list.files(pattern = \"*.csv\")\n\n# read in all CSV files into a list of dataframes\ndf_list &lt;- purrr::map(file_names, ~{\n    df &lt;- read.csv(.x)\n    df$filename &lt;- .x\n    df\n})\n\ndf &lt;- purrr::reduce(df_list, dplyr::bind_rows)\n\ndf_per_sim &lt;- df %&gt;%\n    filter(effect == \"fixed\") %&gt;%\n    filter(term == \"SpeechStyle\") %&gt;%\n    group_by(filename) %&gt;%\n    summarise(median_estimate = median(estimate), median_se = median(std.error),\n        power = mean(p.value &lt; 0.05))\n\nPowerGridData &lt;- df_per_sim %&gt;%\n    mutate(n_subj = as.numeric(sapply(strsplit(filename, \"_\"),\n        `[`, 4)), n_trial = as.factor(str_replace(sapply(strsplit(filename,\n        \"_\"), `[`, 5), pattern = \".csv\", \"\")))\n\nggplot(PowerGridData) + geom_point(aes(x = n_subj, y = power,\n    color = n_trial)) + geom_line(aes(x = n_subj, y = power,\n    color = n_trial)) + geom_hline(yintercept = 0.8, linetype = 3) +\n    xlab(\"Sample Size\") + ylab(\"Statistical Power\") + ggtitle(\"Interaction among Number of Subjects & Repeated Measures\") +\n    scale_color_brewer(palette = \"Dark2\") + plot_theme",
    "crumbs": [
      "Part III, Grid Searches and Sensitivity Analyses"
    ]
  },
  {
    "objectID": "content/GridSearch.html#exercises-to-check-understanding",
    "href": "content/GridSearch.html#exercises-to-check-understanding",
    "title": "Grid Searches and Sensitivity Analyses",
    "section": "2 Exercises to Check Understanding",
    "text": "2 Exercises to Check Understanding\n\n2.1 Exercise VI\nHow would you adapt the above grid search code to investigate the effect of varying",
    "crumbs": [
      "Part III, Grid Searches and Sensitivity Analyses"
    ]
  }
]